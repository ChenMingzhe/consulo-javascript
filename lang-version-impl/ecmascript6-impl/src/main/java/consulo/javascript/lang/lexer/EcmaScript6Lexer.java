/* The following code was generated by JFlex 1.4.4 on 03.03.16 6:57 */

package consulo.javascript.lang.lexer;

import com.intellij.lexer.LexerBase;
import com.intellij.psi.tree.IElementType;
import com.intellij.lang.javascript.JSTokenTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.4
 * on 03.03.16 6:57 from the specification file
 * <tt>R:/_github.com/consulo/consulo-javascript/ecmascript6-impl/src/org/mustbe/consulo/javascript/lang/lexer/ecmascript6.flex</tt>
 */
public class EcmaScript6Lexer extends LexerBase {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int DIV_OR_GT = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\5\1\3\1\20\1\0\1\3\1\10\16\5\4\0\1\3\1\57"+
    "\1\23\1\0\1\4\1\66\1\63\1\21\1\67\1\70\1\7\1\60"+
    "\1\74\1\17\1\15\1\6\1\11\11\1\1\77\1\73\1\62\1\56"+
    "\1\61\1\76\1\0\1\2\1\12\2\2\1\16\1\2\10\4\1\13"+
    "\10\4\1\14\2\4\1\25\1\22\1\26\1\65\1\4\1\24\1\36"+
    "\1\44\1\46\1\42\1\34\1\35\1\27\1\47\1\43\1\4\1\45"+
    "\1\37\1\55\1\41\1\50\1\53\1\4\1\32\1\40\1\31\1\33"+
    "\1\54\1\52\1\30\1\51\1\4\1\71\1\64\1\72\1\75\41\5"+
    "\2\0\4\4\4\0\1\4\2\0\1\5\7\0\1\4\4\0\1\4"+
    "\5\0\27\4\1\0\37\4\1\0\u013f\4\31\0\162\4\4\0\14\4"+
    "\16\0\5\4\11\0\1\4\21\0\130\5\5\0\23\5\12\0\1\4"+
    "\13\0\1\4\1\0\3\4\1\0\1\4\1\0\24\4\1\0\54\4"+
    "\1\0\46\4\1\0\5\4\4\0\202\4\1\0\4\5\3\0\105\4"+
    "\1\0\46\4\2\0\2\4\6\0\20\4\41\0\46\4\2\0\1\4"+
    "\7\0\47\4\11\0\21\5\1\0\27\5\1\0\3\5\1\0\1\5"+
    "\1\0\2\5\1\0\1\5\13\0\33\4\5\0\3\4\15\0\4\5"+
    "\14\0\6\5\13\0\32\4\5\0\13\4\16\5\7\0\12\5\4\0"+
    "\2\4\1\5\143\4\1\0\1\4\10\5\1\0\6\5\2\4\2\5"+
    "\1\0\4\5\2\4\12\5\3\4\2\0\1\4\17\0\1\5\1\4"+
    "\1\5\36\4\33\5\2\0\3\4\60\0\46\4\13\5\1\4\u014f\0"+
    "\3\5\66\4\2\0\1\5\1\4\20\5\2\0\1\4\4\5\3\0"+
    "\12\4\2\5\2\0\12\5\21\0\3\5\1\0\10\4\2\0\2\4"+
    "\2\0\26\4\1\0\7\4\1\0\1\4\3\0\4\4\2\0\1\5"+
    "\1\4\7\5\2\0\2\5\2\0\3\5\11\0\1\5\4\0\2\4"+
    "\1\0\3\4\2\5\2\0\12\5\4\4\15\0\3\5\1\0\6\4"+
    "\4\0\2\4\2\0\26\4\1\0\7\4\1\0\2\4\1\0\2\4"+
    "\1\0\2\4\2\0\1\5\1\0\5\5\4\0\2\5\2\0\3\5"+
    "\13\0\4\4\1\0\1\4\7\0\14\5\3\4\14\0\3\5\1\0"+
    "\11\4\1\0\3\4\1\0\26\4\1\0\7\4\1\0\2\4\1\0"+
    "\5\4\2\0\1\5\1\4\10\5\1\0\3\5\1\0\3\5\2\0"+
    "\1\4\17\0\2\4\2\5\2\0\12\5\1\0\1\4\17\0\3\5"+
    "\1\0\10\4\2\0\2\4\2\0\26\4\1\0\7\4\1\0\2\4"+
    "\1\0\5\4\2\0\1\5\1\4\6\5\3\0\2\5\2\0\3\5"+
    "\10\0\2\5\4\0\2\4\1\0\3\4\4\0\12\5\1\0\1\4"+
    "\20\0\1\5\1\4\1\0\6\4\3\0\3\4\1\0\4\4\3\0"+
    "\2\4\1\0\1\4\1\0\2\4\3\0\2\4\3\0\3\4\3\0"+
    "\10\4\1\0\3\4\4\0\5\5\3\0\3\5\1\0\4\5\11\0"+
    "\1\5\17\0\11\5\11\0\1\4\7\0\3\5\1\0\10\4\1\0"+
    "\3\4\1\0\27\4\1\0\12\4\1\0\5\4\4\0\7\5\1\0"+
    "\3\5\1\0\4\5\7\0\2\5\11\0\2\4\4\0\12\5\22\0"+
    "\2\5\1\0\10\4\1\0\3\4\1\0\27\4\1\0\12\4\1\0"+
    "\5\4\2\0\1\5\1\4\7\5\1\0\3\5\1\0\4\5\7\0"+
    "\2\5\7\0\1\4\1\0\2\4\4\0\12\5\22\0\2\5\1\0"+
    "\10\4\1\0\3\4\1\0\27\4\1\0\20\4\4\0\6\5\2\0"+
    "\3\5\1\0\4\5\11\0\1\5\10\0\2\4\4\0\12\5\22\0"+
    "\2\5\1\0\22\4\3\0\30\4\1\0\11\4\1\0\1\4\2\0"+
    "\7\4\3\0\1\5\4\0\6\5\1\0\1\5\1\0\10\5\22\0"+
    "\2\5\15\0\60\4\1\5\2\4\7\5\4\0\10\4\10\5\1\0"+
    "\12\5\47\0\2\4\1\0\1\4\2\0\2\4\1\0\1\4\2\0"+
    "\1\4\6\0\4\4\1\0\7\4\1\0\3\4\1\0\1\4\1\0"+
    "\1\4\2\0\2\4\1\0\4\4\1\5\2\4\6\5\1\0\2\5"+
    "\1\4\2\0\5\4\1\0\1\4\1\0\6\5\2\0\12\5\2\0"+
    "\2\4\42\0\1\4\27\0\2\5\6\0\12\5\13\0\1\5\1\0"+
    "\1\5\1\0\1\5\4\0\2\5\10\4\1\0\42\4\6\0\24\5"+
    "\1\0\2\5\4\4\4\0\10\5\1\0\44\5\11\0\1\5\71\0"+
    "\42\4\1\0\5\4\1\0\2\4\1\0\7\5\3\0\4\5\6\0"+
    "\12\5\6\0\6\4\4\5\106\0\46\4\12\0\51\4\7\0\132\4"+
    "\5\0\104\4\5\0\122\4\6\0\7\4\1\0\77\4\1\0\1\4"+
    "\1\0\4\4\2\0\7\4\1\0\1\4\1\0\4\4\2\0\47\4"+
    "\1\0\1\4\1\0\4\4\2\0\37\4\1\0\1\4\1\0\4\4"+
    "\2\0\7\4\1\0\1\4\1\0\4\4\2\0\7\4\1\0\7\4"+
    "\1\0\27\4\1\0\37\4\1\0\1\4\1\0\4\4\2\0\7\4"+
    "\1\0\47\4\1\0\23\4\16\0\11\5\56\0\125\4\14\0\u026c\4"+
    "\2\0\10\4\12\0\32\4\5\0\113\4\3\0\3\4\17\0\15\4"+
    "\1\0\4\4\3\5\13\0\22\4\3\5\13\0\22\4\2\5\14\0"+
    "\15\4\1\0\3\4\1\0\2\5\14\0\64\4\40\5\3\0\1\4"+
    "\3\0\2\4\1\5\2\0\12\5\41\0\3\5\2\0\12\5\6\0"+
    "\130\4\10\0\51\4\1\5\126\0\35\4\3\0\14\5\4\0\14\5"+
    "\12\0\12\5\36\4\2\0\5\4\u038b\0\154\4\224\0\234\4\4\0"+
    "\132\4\6\0\26\4\2\0\6\4\2\0\46\4\2\0\6\4\2\0"+
    "\10\4\1\0\1\4\1\0\1\4\1\0\1\4\1\0\37\4\2\0"+
    "\65\4\1\0\7\4\1\0\1\4\3\0\3\4\1\0\7\4\3\0"+
    "\4\4\2\0\6\4\4\0\15\4\5\0\3\4\1\0\7\4\17\0"+
    "\4\5\32\0\5\5\20\0\2\4\23\0\1\4\13\0\4\5\6\0"+
    "\6\5\1\0\1\4\15\0\1\4\40\0\22\4\36\0\15\5\4\0"+
    "\1\5\3\0\6\5\27\0\1\4\4\0\1\4\2\0\12\4\1\0"+
    "\1\4\3\0\5\4\6\0\1\4\1\0\1\4\1\0\1\4\1\0"+
    "\4\4\1\0\3\4\1\0\7\4\3\0\3\4\5\0\5\4\26\0"+
    "\44\4\u0e81\0\3\4\31\0\11\4\6\5\1\0\5\4\2\0\5\4"+
    "\4\0\126\4\2\0\2\5\2\0\3\4\1\0\137\4\5\0\50\4"+
    "\4\0\136\4\21\0\30\4\70\0\20\4\u0200\0\u19b6\4\112\0\u51a6\4"+
    "\132\0\u048d\4\u0773\0\u2ba4\4\u215c\0\u012e\4\2\0\73\4\225\0\7\4"+
    "\14\0\5\4\5\0\1\4\1\5\12\4\1\0\15\4\1\0\5\4"+
    "\1\0\1\4\1\0\2\4\1\0\2\4\1\0\154\4\41\0\u016b\4"+
    "\22\0\100\4\2\0\66\4\50\0\15\4\3\0\20\5\20\0\4\5"+
    "\17\0\2\4\30\0\3\4\31\0\1\4\6\0\5\4\1\0\207\4"+
    "\2\0\1\5\4\0\1\4\13\0\12\5\7\0\32\4\4\0\1\4"+
    "\1\0\32\4\12\0\132\4\3\0\6\4\2\0\6\4\2\0\6\4"+
    "\2\0\3\4\3\0\2\4\3\0\2\4\22\0\3\5\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\1\6\1\2"+
    "\1\7\1\10\1\11\1\12\1\1\1\13\1\14\20\3"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\6\1\37\2\2\1\40\1\41\1\42"+
    "\1\0\1\40\2\2\1\0\1\43\1\44\2\11\2\12"+
    "\1\0\1\45\22\3\1\46\1\47\1\50\15\3\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71"+
    "\1\40\1\42\1\72\1\40\2\0\1\73\2\11\2\12"+
    "\1\3\1\74\14\3\1\75\1\76\3\3\1\77\21\3"+
    "\1\100\1\3\1\101\1\102\1\103\1\104\1\105\1\0"+
    "\2\72\1\106\1\3\1\107\5\3\1\110\1\111\5\3"+
    "\1\112\10\3\1\113\4\3\1\114\5\3\1\115\1\116"+
    "\1\42\1\0\1\117\6\3\1\120\11\3\1\121\1\122"+
    "\1\123\1\3\1\124\1\125\1\126\4\3\1\127\1\130"+
    "\2\3\1\131\2\3\1\132\1\133\1\3\1\134\3\3"+
    "\1\135\3\3\1\136\2\3\1\137\1\3\1\140\1\141"+
    "\4\3\1\142\1\3\1\143\1\3\1\144\3\3\1\145"+
    "\1\3\1\146\1\147\2\3\1\150\1\151\1\152";

  private static int [] zzUnpackAction() {
    int [] result = new int[292];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\100\0\200\0\300\0\u0100\0\u0140\0\u0180\0\200"+
    "\0\u01c0\0\u0200\0\u0240\0\u0280\0\u02c0\0\u0300\0\200\0\200"+
    "\0\u0340\0\u0380\0\u03c0\0\u0400\0\u0440\0\u0480\0\u04c0\0\u0500"+
    "\0\u0540\0\u0580\0\u05c0\0\u0600\0\u0640\0\u0680\0\u06c0\0\u0700"+
    "\0\u0740\0\u0780\0\u07c0\0\u0800\0\u0840\0\u0880\0\u08c0\0\u0900"+
    "\0\200\0\200\0\200\0\200\0\200\0\200\0\200\0\200"+
    "\0\200\0\u0940\0\u0980\0\u09c0\0\u0a00\0\u0a40\0\u0a80\0\u0ac0"+
    "\0\u0b00\0\u0b40\0\u0b80\0\u0bc0\0\u0c00\0\u0c40\0\200\0\200"+
    "\0\200\0\u0c80\0\u0cc0\0\200\0\u0300\0\u0300\0\u0d00\0\u0d40"+
    "\0\u0d80\0\u0dc0\0\u0e00\0\u0e40\0\u0e80\0\u0ec0\0\u0f00\0\u0f40"+
    "\0\u0f80\0\u0fc0\0\u1000\0\u1040\0\u1080\0\u10c0\0\u1100\0\u1140"+
    "\0\u0100\0\u0100\0\u1180\0\u11c0\0\u1200\0\u1240\0\u1280\0\u12c0"+
    "\0\u1300\0\u1340\0\u1380\0\u13c0\0\u1400\0\u1440\0\u1480\0\u14c0"+
    "\0\u1500\0\200\0\u1540\0\200\0\200\0\200\0\u1580\0\200"+
    "\0\200\0\200\0\200\0\200\0\200\0\200\0\200\0\200"+
    "\0\u15c0\0\u1600\0\u1640\0\u1680\0\u16c0\0\u1700\0\u1740\0\200"+
    "\0\u1780\0\u17c0\0\u1800\0\u1840\0\u1880\0\u0100\0\u18c0\0\u1900"+
    "\0\u1940\0\u1980\0\u19c0\0\u1a00\0\u1a40\0\u1a80\0\u1ac0\0\u1b00"+
    "\0\u1b40\0\u1b80\0\u0100\0\u0100\0\u1bc0\0\u1c00\0\u1c40\0\u0100"+
    "\0\u1c80\0\u1cc0\0\u1d00\0\u1d40\0\u1d80\0\u1dc0\0\u1e00\0\u1e40"+
    "\0\u1e80\0\u1ec0\0\u1f00\0\u1f40\0\u1f80\0\u1fc0\0\u2000\0\u2040"+
    "\0\u2080\0\u0100\0\u20c0\0\200\0\200\0\200\0\u2100\0\200"+
    "\0\u2140\0\u2180\0\200\0\u0100\0\u21c0\0\u0100\0\u2200\0\u2240"+
    "\0\u2280\0\u22c0\0\u2300\0\u0100\0\u0100\0\u2340\0\u2380\0\u23c0"+
    "\0\u2400\0\u2440\0\u0100\0\u2480\0\u24c0\0\u2500\0\u2540\0\u2580"+
    "\0\u25c0\0\u2600\0\u2640\0\u0100\0\u2680\0\u26c0\0\u2700\0\u2740"+
    "\0\u0100\0\u2780\0\u27c0\0\u2800\0\u2840\0\u2880\0\u0100\0\200"+
    "\0\200\0\u28c0\0\u0100\0\u2900\0\u2940\0\u2980\0\u29c0\0\u2a00"+
    "\0\u2a40\0\u0100\0\u2a80\0\u2ac0\0\u2b00\0\u2b40\0\u2b80\0\u2bc0"+
    "\0\u2c00\0\u2c40\0\u2c80\0\u0100\0\u0100\0\u0100\0\u2cc0\0\u0100"+
    "\0\u0100\0\u0100\0\u2d00\0\u2d40\0\u2d80\0\u2dc0\0\u0100\0\u0100"+
    "\0\u2e00\0\u2e40\0\u0100\0\u2e80\0\u2ec0\0\u0100\0\u0100\0\u2f00"+
    "\0\u0100\0\u2f40\0\u2f80\0\u2fc0\0\u0100\0\u3000\0\u3040\0\u3080"+
    "\0\u0100\0\u30c0\0\u3100\0\u0100\0\u3140\0\u0100\0\u0100\0\u3180"+
    "\0\u31c0\0\u3200\0\u3240\0\u0100\0\u3280\0\u0100\0\u32c0\0\u0100"+
    "\0\u3300\0\u3340\0\u3380\0\u0100\0\u33c0\0\u0100\0\u0100\0\u3400"+
    "\0\u3440\0\u0100\0\u0100\0\u0100";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[292];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\5\1\3\1\7\1\10"+
    "\1\6\1\11\3\5\1\12\1\5\1\13\1\6\1\14"+
    "\1\3\1\15\1\16\1\17\1\20\2\5\1\21\1\22"+
    "\1\23\1\24\1\25\1\5\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\5\1\34\2\5\1\35\1\36\1\37"+
    "\1\40\1\5\1\41\1\42\1\43\1\44\1\3\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\3\1\4\1\5\1\6"+
    "\1\5\1\3\1\62\1\63\1\6\1\11\3\5\1\12"+
    "\1\5\1\13\1\6\1\14\1\3\1\15\1\16\1\17"+
    "\1\20\2\5\1\21\1\22\1\23\1\24\1\25\1\5"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\5\1\34"+
    "\2\5\1\35\1\36\1\37\1\40\1\5\1\41\1\42"+
    "\1\43\1\44\1\64\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\101\0\1\4\7\0\1\4\3\0\1\65\1\66\15\0"+
    "\1\66\44\0\2\5\1\0\2\5\3\0\4\5\1\0"+
    "\1\5\10\0\27\5\25\0\1\6\4\0\1\6\7\0"+
    "\1\6\57\0\6\67\1\70\1\71\1\0\7\67\1\0"+
    "\1\67\1\72\2\67\1\73\52\67\1\0\1\4\7\0"+
    "\1\4\2\74\1\75\1\65\1\66\11\0\1\75\3\0"+
    "\1\66\7\0\1\74\3\0\1\74\30\0\1\65\7\0"+
    "\1\65\3\0\1\76\101\0\1\77\36\0\1\100\21\0"+
    "\10\14\1\0\7\14\1\0\1\101\1\102\55\14\10\15"+
    "\1\0\7\15\1\0\1\15\1\103\1\104\54\15\24\105"+
    "\1\106\53\105\1\0\2\5\1\0\2\5\3\0\4\5"+
    "\1\0\1\5\10\0\3\5\1\107\14\5\1\110\1\5"+
    "\1\111\4\5\23\0\2\5\1\0\2\5\3\0\4\5"+
    "\1\0\1\5\10\0\5\5\1\112\21\5\23\0\2\5"+
    "\1\0\2\5\3\0\4\5\1\0\1\5\10\0\12\5"+
    "\1\113\14\5\23\0\2\5\1\0\2\5\3\0\4\5"+
    "\1\0\1\5\10\0\1\5\1\114\6\5\1\115\1\5"+
    "\1\116\14\5\23\0\2\5\1\0\2\5\3\0\4\5"+
    "\1\0\1\5\10\0\4\5\1\117\2\5\1\120\4\5"+
    "\1\121\4\5\1\122\5\5\23\0\2\5\1\0\2\5"+
    "\3\0\4\5\1\0\1\5\10\0\5\5\1\123\21\5"+
    "\23\0\2\5\1\0\2\5\3\0\4\5\1\0\1\5"+
    "\10\0\2\5\1\124\20\5\1\125\3\5\23\0\2\5"+
    "\1\0\2\5\3\0\4\5\1\0\1\5\10\0\4\5"+
    "\1\126\1\127\21\5\23\0\2\5\1\0\2\5\3\0"+
    "\4\5\1\0\1\5\10\0\5\5\1\130\13\5\1\131"+
    "\5\5\23\0\2\5\1\0\2\5\3\0\4\5\1\0"+
    "\1\5\10\0\6\5\1\132\3\5\1\133\13\5\1\134"+
    "\23\0\2\5\1\0\2\5\3\0\4\5\1\0\1\5"+
    "\10\0\3\5\1\135\23\5\23\0\2\5\1\0\2\5"+
    "\3\0\4\5\1\0\1\5\10\0\7\5\1\136\1\137"+
    "\10\5\1\140\5\5\23\0\2\5\1\0\2\5\3\0"+
    "\4\5\1\0\1\5\10\0\14\5\1\141\12\5\23\0"+
    "\2\5\1\0\2\5\3\0\4\5\1\0\1\5\10\0"+
    "\14\5\1\142\3\5\1\143\6\5\23\0\2\5\1\0"+
    "\2\5\3\0\4\5\1\0\1\5\10\0\3\5\1\144"+
    "\1\145\2\5\1\146\17\5\23\0\2\5\1\0\2\5"+
    "\3\0\4\5\1\0\1\5\10\0\7\5\1\147\11\5"+
    "\1\150\5\5\100\0\1\151\2\0\1\152\74\0\1\153"+
    "\77\0\1\154\1\0\1\155\75\0\1\156\2\0\1\157"+
    "\74\0\1\160\4\0\1\161\72\0\1\162\5\0\1\163"+
    "\71\0\1\164\77\0\1\165\27\0\1\70\1\71\46\0"+
    "\1\166\77\0\1\167\77\0\1\170\3\0\1\171\16\0"+
    "\1\65\7\0\1\65\4\0\1\66\15\0\1\66\44\0"+
    "\1\74\7\0\1\74\5\0\1\74\40\0\1\74\17\0"+
    "\6\67\1\172\1\67\1\0\7\67\1\0\1\67\1\72"+
    "\2\67\1\73\52\67\10\70\1\0\7\70\1\0\57\70"+
    "\7\173\1\174\70\173\10\67\1\0\7\67\1\0\57\67"+
    "\6\73\1\175\1\73\1\176\7\73\1\176\1\73\1\177"+
    "\3\73\1\67\51\73\1\0\1\74\7\0\1\74\67\0"+
    "\2\75\6\0\2\75\3\0\1\75\15\0\3\75\3\0"+
    "\1\75\1\0\1\75\1\0\1\75\46\0\1\200\62\0"+
    "\3\14\1\201\4\14\1\202\67\14\3\15\1\203\4\15"+
    "\1\204\67\15\1\0\2\5\1\0\2\5\3\0\4\5"+
    "\1\0\1\5\10\0\4\5\1\205\15\5\1\206\4\5"+
    "\23\0\2\5\1\0\2\5\3\0\4\5\1\0\1\5"+
    "\10\0\3\5\1\207\10\5\1\210\12\5\23\0\2\5"+
    "\1\0\2\5\3\0\4\5\1\0\1\5\10\0\24\5"+
    "\1\211\2\5\23\0\2\5\1\0\2\5\3\0\4\5"+
    "\1\0\1\5\10\0\2\5\1\212\24\5\23\0\2\5"+
    "\1\0\2\5\3\0\4\5\1\0\1\5\10\0\13\5"+
    "\1\213\13\5\23\0\2\5\1\0\2\5\3\0\4\5"+
    "\1\0\1\5\10\0\2\5\1\214\21\5\1\215\2\5"+
    "\23\0\2\5\1\0\2\5\3\0\4\5\1\0\1\5"+
    "\10\0\11\5\1\216\15\5\23\0\2\5\1\0\2\5"+
    "\3\0\4\5\1\0\1\5\10\0\4\5\1\217\22\5"+
    "\23\0\2\5\1\0\2\5\3\0\4\5\1\0\1\5"+
    "\10\0\12\5\1\220\14\5\23\0\2\5\1\0\2\5"+
    "\3\0\4\5\1\0\1\5\10\0\10\5\1\221\16\5"+
    "\23\0\2\5\1\0\2\5\3\0\4\5\1\0\1\5"+
    "\10\0\12\5\1\222\14\5\23\0\2\5\1\0\2\5"+
    "\3\0\4\5\1\0\1\5\10\0\3\5\1\223\23\5"+
    "\23\0\2\5\1\0\2\5\3\0\4\5\1\0\1\5"+
    "\10\0\2\5\1\224\24\5\23\0\2\5\1\0\2\5"+
    "\3\0\4\5\1\0\1\5\10\0\7\5\1\225\17\5"+
    "\23\0\2\5\1\0\2\5\3\0\4\5\1\0\1\5"+
    "\10\0\14\5\1\226\12\5\23\0\2\5\1\0\2\5"+
    "\3\0\4\5\1\0\1\5\10\0\10\5\1\227\16\5"+
    "\23\0\2\5\1\0\2\5\3\0\4\5\1\0\1\5"+
    "\10\0\23\5\1\230\3\5\23\0\2\5\1\0\2\5"+
    "\3\0\4\5\1\0\1\5\10\0\6\5\1\231\1\5"+
    "\1\232\16\5\23\0\2\5\1\0\2\5\3\0\4\5"+
    "\1\0\1\5\10\0\2\5\1\233\6\5\1\234\15\5"+
    "\23\0\2\5\1\0\2\5\3\0\4\5\1\0\1\5"+
    "\10\0\24\5\1\235\2\5\23\0\2\5\1\0\2\5"+
    "\3\0\4\5\1\0\1\5\10\0\5\5\1\236\21\5"+
    "\23\0\2\5\1\0\2\5\3\0\4\5\1\0\1\5"+
    "\10\0\2\5\1\237\6\5\1\240\15\5\23\0\2\5"+
    "\1\0\2\5\3\0\4\5\1\0\1\5\10\0\7\5"+
    "\1\241\17\5\23\0\2\5\1\0\2\5\3\0\4\5"+
    "\1\0\1\5\10\0\12\5\1\242\14\5\23\0\2\5"+
    "\1\0\2\5\3\0\4\5\1\0\1\5\10\0\5\5"+
    "\1\243\21\5\23\0\2\5\1\0\2\5\3\0\4\5"+
    "\1\0\1\5\10\0\2\5\1\244\24\5\23\0\2\5"+
    "\1\0\2\5\3\0\4\5\1\0\1\5\10\0\14\5"+
    "\1\245\12\5\23\0\2\5\1\0\2\5\3\0\4\5"+
    "\1\0\1\5\10\0\14\5\1\246\4\5\1\247\5\5"+
    "\23\0\2\5\1\0\2\5\3\0\4\5\1\0\1\5"+
    "\10\0\15\5\1\250\11\5\23\0\2\5\1\0\2\5"+
    "\3\0\4\5\1\0\1\5\10\0\17\5\1\251\7\5"+
    "\23\0\2\5\1\0\2\5\3\0\4\5\1\0\1\5"+
    "\10\0\3\5\1\252\23\5\23\0\2\5\1\0\2\5"+
    "\3\0\4\5\1\0\1\5\10\0\14\5\1\253\12\5"+
    "\100\0\1\254\77\0\1\255\77\0\1\256\2\0\1\257"+
    "\74\0\1\260\50\0\2\172\12\0\1\172\11\0\1\172"+
    "\22\0\7\173\1\261\70\173\6\262\1\263\1\174\70\262"+
    "\26\176\1\67\2\175\12\176\1\175\11\176\1\175\50\176"+
    "\1\67\51\176\10\73\1\176\7\73\1\176\5\73\1\67"+
    "\51\73\3\14\1\201\4\14\1\202\10\14\1\101\1\102"+
    "\65\14\1\0\10\14\1\101\1\102\55\14\3\15\1\203"+
    "\4\15\1\204\11\15\1\103\1\104\64\15\1\0\11\15"+
    "\1\103\1\104\54\15\1\0\2\5\1\0\2\5\3\0"+
    "\4\5\1\0\1\5\10\0\5\5\1\264\21\5\23\0"+
    "\2\5\1\0\2\5\3\0\4\5\1\0\1\5\10\0"+
    "\21\5\1\265\5\5\23\0\2\5\1\0\2\5\3\0"+
    "\4\5\1\0\1\5\10\0\11\5\1\266\15\5\23\0"+
    "\2\5\1\0\2\5\3\0\4\5\1\0\1\5\10\0"+
    "\5\5\1\267\21\5\23\0\2\5\1\0\2\5\3\0"+
    "\4\5\1\0\1\5\10\0\4\5\1\270\22\5\23\0"+
    "\2\5\1\0\2\5\3\0\4\5\1\0\1\5\10\0"+
    "\5\5\1\271\21\5\23\0\2\5\1\0\2\5\3\0"+
    "\4\5\1\0\1\5\10\0\5\5\1\272\21\5\23\0"+
    "\2\5\1\0\2\5\3\0\4\5\1\0\1\5\10\0"+
    "\21\5\1\273\5\5\23\0\2\5\1\0\2\5\3\0"+
    "\4\5\1\0\1\5\10\0\5\5\1\274\21\5\23\0"+
    "\2\5\1\0\2\5\3\0\4\5\1\0\1\5\10\0"+
    "\26\5\1\275\23\0\2\5\1\0\2\5\3\0\4\5"+
    "\1\0\1\5\10\0\17\5\1\276\7\5\23\0\2\5"+
    "\1\0\2\5\3\0\4\5\1\0\1\5\10\0\11\5"+
    "\1\277\15\5\23\0\2\5\1\0\2\5\3\0\4\5"+
    "\1\0\1\5\10\0\7\5\1\300\17\5\23\0\2\5"+
    "\1\0\2\5\3\0\4\5\1\0\1\5\10\0\2\5"+
    "\1\301\24\5\23\0\2\5\1\0\2\5\3\0\4\5"+
    "\1\0\1\5\10\0\2\5\1\302\24\5\23\0\2\5"+
    "\1\0\2\5\3\0\4\5\1\0\1\5\10\0\10\5"+
    "\1\303\16\5\23\0\2\5\1\0\2\5\3\0\4\5"+
    "\1\0\1\5\10\0\7\5\1\304\17\5\23\0\2\5"+
    "\1\0\2\5\3\0\4\5\1\0\1\5\10\0\5\5"+
    "\1\305\21\5\23\0\2\5\1\0\2\5\3\0\4\5"+
    "\1\0\1\5\10\0\5\5\1\306\21\5\23\0\2\5"+
    "\1\0\2\5\3\0\4\5\1\0\1\5\10\0\2\5"+
    "\1\307\24\5\23\0\2\5\1\0\2\5\3\0\4\5"+
    "\1\0\1\5\10\0\10\5\1\310\10\5\1\311\5\5"+
    "\23\0\2\5\1\0\2\5\3\0\4\5\1\0\1\5"+
    "\10\0\7\5\1\312\17\5\23\0\2\5\1\0\2\5"+
    "\3\0\4\5\1\0\1\5\10\0\17\5\1\313\7\5"+
    "\23\0\2\5\1\0\2\5\3\0\4\5\1\0\1\5"+
    "\10\0\5\5\1\314\21\5\23\0\2\5\1\0\2\5"+
    "\3\0\4\5\1\0\1\5\10\0\11\5\1\315\15\5"+
    "\23\0\2\5\1\0\2\5\3\0\4\5\1\0\1\5"+
    "\10\0\2\5\1\316\6\5\1\317\15\5\23\0\2\5"+
    "\1\0\2\5\3\0\4\5\1\0\1\5\10\0\10\5"+
    "\1\320\16\5\23\0\2\5\1\0\2\5\3\0\4\5"+
    "\1\0\1\5\10\0\20\5\1\321\6\5\23\0\2\5"+
    "\1\0\2\5\3\0\4\5\1\0\1\5\10\0\10\5"+
    "\1\322\16\5\23\0\2\5\1\0\2\5\3\0\4\5"+
    "\1\0\1\5\10\0\25\5\1\323\1\5\23\0\2\5"+
    "\1\0\2\5\3\0\4\5\1\0\1\5\10\0\2\5"+
    "\1\324\24\5\23\0\2\5\1\0\2\5\3\0\4\5"+
    "\1\0\1\5\10\0\10\5\1\325\16\5\23\0\2\5"+
    "\1\0\2\5\3\0\4\5\1\0\1\5\10\0\16\5"+
    "\1\326\10\5\23\0\2\5\1\0\2\5\3\0\4\5"+
    "\1\0\1\5\10\0\13\5\1\327\13\5\100\0\1\330"+
    "\21\0\6\173\1\331\1\261\70\173\7\262\1\332\70\262"+
    "\1\0\2\5\1\0\2\5\3\0\4\5\1\0\1\5"+
    "\10\0\23\5\1\333\3\5\23\0\2\5\1\0\2\5"+
    "\3\0\4\5\1\0\1\5\10\0\21\5\1\334\5\5"+
    "\23\0\2\5\1\0\2\5\3\0\4\5\1\0\1\5"+
    "\10\0\3\5\1\335\23\5\23\0\2\5\1\0\2\5"+
    "\3\0\4\5\1\0\1\5\10\0\6\5\1\336\20\5"+
    "\23\0\2\5\1\0\2\5\3\0\4\5\1\0\1\5"+
    "\10\0\12\5\1\337\14\5\23\0\2\5\1\0\2\5"+
    "\3\0\4\5\1\0\1\5\10\0\3\5\1\340\23\5"+
    "\23\0\2\5\1\0\2\5\3\0\4\5\1\0\1\5"+
    "\10\0\2\5\1\341\24\5\23\0\2\5\1\0\2\5"+
    "\3\0\4\5\1\0\1\5\10\0\5\5\1\342\21\5"+
    "\23\0\2\5\1\0\2\5\3\0\4\5\1\0\1\5"+
    "\10\0\10\5\1\343\16\5\23\0\2\5\1\0\2\5"+
    "\3\0\4\5\1\0\1\5\10\0\14\5\1\344\12\5"+
    "\23\0\2\5\1\0\2\5\3\0\4\5\1\0\1\5"+
    "\10\0\17\5\1\345\7\5\23\0\2\5\1\0\2\5"+
    "\3\0\4\5\1\0\1\5\10\0\4\5\1\346\22\5"+
    "\23\0\2\5\1\0\2\5\3\0\4\5\1\0\1\5"+
    "\10\0\2\5\1\347\24\5\23\0\2\5\1\0\2\5"+
    "\3\0\4\5\1\0\1\5\10\0\3\5\1\350\23\5"+
    "\23\0\2\5\1\0\2\5\3\0\4\5\1\0\1\5"+
    "\10\0\7\5\1\351\17\5\23\0\2\5\1\0\2\5"+
    "\3\0\4\5\1\0\1\5\10\0\5\5\1\352\21\5"+
    "\23\0\2\5\1\0\2\5\3\0\4\5\1\0\1\5"+
    "\10\0\3\5\1\353\23\5\23\0\2\5\1\0\2\5"+
    "\3\0\4\5\1\0\1\5\10\0\16\5\1\354\10\5"+
    "\23\0\2\5\1\0\2\5\3\0\4\5\1\0\1\5"+
    "\10\0\20\5\1\355\6\5\23\0\2\5\1\0\2\5"+
    "\3\0\4\5\1\0\1\5\10\0\11\5\1\356\15\5"+
    "\23\0\2\5\1\0\2\5\3\0\4\5\1\0\1\5"+
    "\10\0\14\5\1\357\12\5\23\0\2\5\1\0\2\5"+
    "\3\0\4\5\1\0\1\5\10\0\2\5\1\360\24\5"+
    "\23\0\2\5\1\0\2\5\3\0\4\5\1\0\1\5"+
    "\10\0\13\5\1\361\13\5\23\0\2\5\1\0\2\5"+
    "\3\0\4\5\1\0\1\5\10\0\5\5\1\362\21\5"+
    "\23\0\2\5\1\0\2\5\3\0\4\5\1\0\1\5"+
    "\10\0\7\5\1\363\17\5\23\0\2\5\1\0\2\5"+
    "\3\0\4\5\1\0\1\5\10\0\5\5\1\364\21\5"+
    "\23\0\2\5\1\0\2\5\3\0\4\5\1\0\1\5"+
    "\10\0\14\5\1\365\12\5\23\0\2\5\1\0\2\5"+
    "\3\0\4\5\1\0\1\5\10\0\7\5\1\366\17\5"+
    "\22\0\6\262\1\263\1\332\70\262\1\0\2\5\1\0"+
    "\2\5\3\0\4\5\1\0\1\5\10\0\6\5\1\367"+
    "\20\5\23\0\2\5\1\0\2\5\3\0\4\5\1\0"+
    "\1\5\10\0\12\5\1\370\14\5\23\0\2\5\1\0"+
    "\2\5\3\0\4\5\1\0\1\5\10\0\14\5\1\371"+
    "\12\5\23\0\2\5\1\0\2\5\3\0\4\5\1\0"+
    "\1\5\10\0\13\5\1\372\13\5\23\0\2\5\1\0"+
    "\2\5\3\0\4\5\1\0\1\5\10\0\2\5\1\373"+
    "\24\5\23\0\2\5\1\0\2\5\3\0\4\5\1\0"+
    "\1\5\10\0\14\5\1\374\12\5\23\0\2\5\1\0"+
    "\2\5\3\0\4\5\1\0\1\5\10\0\10\5\1\375"+
    "\16\5\23\0\2\5\1\0\2\5\3\0\4\5\1\0"+
    "\1\5\10\0\17\5\1\376\7\5\23\0\2\5\1\0"+
    "\2\5\3\0\4\5\1\0\1\5\10\0\20\5\1\377"+
    "\6\5\23\0\2\5\1\0\2\5\3\0\4\5\1\0"+
    "\1\5\10\0\10\5\1\u0100\16\5\23\0\2\5\1\0"+
    "\2\5\3\0\4\5\1\0\1\5\10\0\5\5\1\u0101"+
    "\21\5\23\0\2\5\1\0\2\5\3\0\4\5\1\0"+
    "\1\5\10\0\6\5\1\u0102\20\5\23\0\2\5\1\0"+
    "\2\5\3\0\4\5\1\0\1\5\10\0\12\5\1\u0103"+
    "\14\5\23\0\2\5\1\0\2\5\3\0\4\5\1\0"+
    "\1\5\10\0\26\5\1\u0104\23\0\2\5\1\0\2\5"+
    "\3\0\4\5\1\0\1\5\10\0\2\5\1\u0105\24\5"+
    "\23\0\2\5\1\0\2\5\3\0\4\5\1\0\1\5"+
    "\10\0\12\5\1\u0106\14\5\23\0\2\5\1\0\2\5"+
    "\3\0\4\5\1\0\1\5\10\0\2\5\1\u0107\24\5"+
    "\23\0\2\5\1\0\2\5\3\0\4\5\1\0\1\5"+
    "\10\0\17\5\1\u0108\7\5\23\0\2\5\1\0\2\5"+
    "\3\0\4\5\1\0\1\5\10\0\17\5\1\u0109\7\5"+
    "\23\0\2\5\1\0\2\5\3\0\4\5\1\0\1\5"+
    "\10\0\1\u010a\26\5\23\0\2\5\1\0\2\5\3\0"+
    "\4\5\1\0\1\5\10\0\12\5\1\u010b\14\5\23\0"+
    "\2\5\1\0\2\5\3\0\4\5\1\0\1\5\10\0"+
    "\11\5\1\u010c\15\5\23\0\2\5\1\0\2\5\3\0"+
    "\4\5\1\0\1\5\10\0\21\5\1\u010d\5\5\23\0"+
    "\2\5\1\0\2\5\3\0\4\5\1\0\1\5\10\0"+
    "\22\5\1\u010e\4\5\23\0\2\5\1\0\2\5\3\0"+
    "\4\5\1\0\1\5\10\0\2\5\1\u010f\24\5\23\0"+
    "\2\5\1\0\2\5\3\0\4\5\1\0\1\5\10\0"+
    "\7\5\1\u0110\17\5\23\0\2\5\1\0\2\5\3\0"+
    "\4\5\1\0\1\5\10\0\17\5\1\u0111\7\5\23\0"+
    "\2\5\1\0\2\5\3\0\4\5\1\0\1\5\10\0"+
    "\5\5\1\u0112\21\5\23\0\2\5\1\0\2\5\3\0"+
    "\4\5\1\0\1\5\10\0\4\5\1\u0113\22\5\23\0"+
    "\2\5\1\0\2\5\3\0\4\5\1\0\1\5\10\0"+
    "\5\5\1\u0114\21\5\23\0\2\5\1\0\2\5\3\0"+
    "\4\5\1\0\1\5\10\0\2\5\1\u0115\24\5\23\0"+
    "\2\5\1\0\2\5\3\0\4\5\1\0\1\5\10\0"+
    "\5\5\1\u0116\21\5\23\0\2\5\1\0\2\5\3\0"+
    "\4\5\1\0\1\5\10\0\5\5\1\u0117\21\5\23\0"+
    "\2\5\1\0\2\5\3\0\4\5\1\0\1\5\10\0"+
    "\12\5\1\u0118\14\5\23\0\2\5\1\0\2\5\3\0"+
    "\4\5\1\0\1\5\10\0\17\5\1\u0119\7\5\23\0"+
    "\2\5\1\0\2\5\3\0\4\5\1\0\1\5\10\0"+
    "\5\5\1\u011a\21\5\23\0\2\5\1\0\2\5\3\0"+
    "\4\5\1\0\1\5\10\0\12\5\1\u011b\14\5\23\0"+
    "\2\5\1\0\2\5\3\0\4\5\1\0\1\5\10\0"+
    "\5\5\1\u011c\21\5\23\0\2\5\1\0\2\5\3\0"+
    "\4\5\1\0\1\5\10\0\5\5\1\u011d\21\5\23\0"+
    "\2\5\1\0\2\5\3\0\4\5\1\0\1\5\10\0"+
    "\13\5\1\u011e\13\5\23\0\2\5\1\0\2\5\3\0"+
    "\4\5\1\0\1\5\10\0\5\5\1\u011f\21\5\23\0"+
    "\2\5\1\0\2\5\3\0\4\5\1\0\1\5\10\0"+
    "\21\5\1\u0120\5\5\23\0\2\5\1\0\2\5\3\0"+
    "\4\5\1\0\1\5\10\0\2\5\1\u0121\24\5\23\0"+
    "\2\5\1\0\2\5\3\0\4\5\1\0\1\5\10\0"+
    "\13\5\1\u0122\13\5\23\0\2\5\1\0\2\5\3\0"+
    "\4\5\1\0\1\5\10\0\6\5\1\u0123\20\5\23\0"+
    "\2\5\1\0\2\5\3\0\4\5\1\0\1\5\10\0"+
    "\11\5\1\u0124\15\5\22\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13440];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\4\1\1\11\6\1\2\11\30\1\11\11"+
    "\10\1\1\0\3\1\1\0\3\11\2\1\1\11\1\0"+
    "\44\1\1\11\1\1\3\11\1\1\11\11\5\1\2\0"+
    "\1\11\53\1\3\11\1\1\1\11\1\0\1\1\1\11"+
    "\44\1\2\11\1\0\112\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[292];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  private IElementType myTokenType;
  private int myState;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;



  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1778) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  @Override
  public IElementType getTokenType() {
    if (myTokenType == null) locateToken();
    return myTokenType;
  }

  @Override
  public final int getTokenStart(){
    if (myTokenType == null) locateToken();
    return zzStartRead;
  }

  @Override
  public final int getTokenEnd(){
    if (myTokenType == null) locateToken();
    return getTokenStart() + yylength();
  }

  @Override
  public void advance() {
    if (myTokenType == null) locateToken();
    myTokenType = null;
  }

  @Override
  public int getState() {
    if (myTokenType == null) locateToken();
    return myState;
  }

  @Override
  public void start(final CharSequence buffer, int startOffset, int endOffset, final int initialState) {
    reset(buffer, startOffset, endOffset, initialState);
    myTokenType = null;
  }

   @Override
   public CharSequence getBufferSequence() {
     return zzBuffer;
   }

   @Override
   public int getBufferEnd() {
     return zzEndRead;
   }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
    myTokenType = null;
  }

   private void locateToken() {
     if (myTokenType != null) return;
     try {
       myState = yystate();
       myTokenType = advanceImpl();
     }
     catch (java.io.IOException e) { /*Can't happen*/ }
     catch (Error e) {
       // add lexer class name to the error
       final Error error = new Error(getClass().getName() + ": " + e.getMessage());
       error.setStackTrace(e.getStackTrace());
       throw error;
     }
   }

   /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advanceImpl() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 100: 
          { yybegin(YYINITIAL); return JSTokenTypes.FUNCTION_KEYWORD;
          }
        case 107: break;
        case 29: 
          { yybegin(YYINITIAL); return JSTokenTypes.COLON;
          }
        case 108: break;
        case 4: 
          { return JSTokenTypes.WHITE_SPACE;
          }
        case 109: break;
        case 32: 
          { return JSTokenTypes.REGEXP_LITERAL;
          }
        case 110: break;
        case 86: 
          { yybegin(YYINITIAL); return JSTokenTypes.WHILE_KEYWORD;
          }
        case 111: break;
        case 21: 
          { yybegin(YYINITIAL); return JSTokenTypes.LPAR;
          }
        case 112: break;
        case 70: 
          { yybegin(DIV_OR_GT); return JSTokenTypes.TRUE_KEYWORD;
          }
        case 113: break;
        case 90: 
          { yybegin(YYINITIAL); return JSTokenTypes.STATIC_KEYWORD;
          }
        case 114: break;
        case 46: 
          { yybegin(YYINITIAL); return JSTokenTypes.GE;
          }
        case 115: break;
        case 91: 
          { yybegin(YYINITIAL); return JSTokenTypes.SWITCH_KEYWORD;
          }
        case 116: break;
        case 34: 
          { return JSTokenTypes.C_STYLE_COMMENT;
          }
        case 117: break;
        case 51: 
          { yybegin(YYINITIAL); return JSTokenTypes.OROR;
          }
        case 118: break;
        case 58: 
          { return JSTokenTypes.DOC_COMMENT;
          }
        case 119: break;
        case 61: 
          { yybegin(YYINITIAL); return JSTokenTypes.FOR_KEYWORD;
          }
        case 120: break;
        case 67: 
          { yybegin(YYINITIAL); return JSTokenTypes.GTGTEQ;
          }
        case 121: break;
        case 26: 
          { yybegin(YYINITIAL); return JSTokenTypes.COMMA;
          }
        case 122: break;
        case 13: 
          { yybegin(YYINITIAL); return JSTokenTypes.EQ;
          }
        case 123: break;
        case 38: 
          { yybegin(YYINITIAL); return JSTokenTypes.DO_KEYWORD;
          }
        case 124: break;
        case 49: 
          { yybegin(YYINITIAL); return JSTokenTypes.ANDAND;
          }
        case 125: break;
        case 45: 
          { return JSTokenTypes.PLUSPLUS;
          }
        case 126: break;
        case 10: 
          { yybegin(YYINITIAL); return JSTokenTypes.STRING_LITERAL;
          }
        case 127: break;
        case 3: 
          { yybegin(DIV_OR_GT);       return JSTokenTypes.IDENTIFIER;
          }
        case 128: break;
        case 5: 
          { return JSTokenTypes.DIV;
          }
        case 129: break;
        case 25: 
          { yybegin(YYINITIAL); return JSTokenTypes.SEMICOLON;
          }
        case 130: break;
        case 52: 
          { yybegin(YYINITIAL); return JSTokenTypes.XOREQ;
          }
        case 131: break;
        case 87: 
          { yybegin(YYINITIAL); return JSTokenTypes.TYPEOF_KEYWORD;
          }
        case 132: break;
        case 72: 
          { yybegin(YYINITIAL); return JSTokenTypes.ELSE_KEYWORD;
          }
        case 133: break;
        case 69: 
          { yybegin(YYINITIAL); return JSTokenTypes.LTLTEQ;
          }
        case 134: break;
        case 60: 
          { yybegin(YYINITIAL); return JSTokenTypes.TRY_KEYWORD;
          }
        case 135: break;
        case 6: 
          { yybegin(YYINITIAL); return JSTokenTypes.MULT;
          }
        case 136: break;
        case 55: 
          { yybegin(YYINITIAL); return JSTokenTypes.MULTEQ;
          }
        case 137: break;
        case 17: 
          { yybegin(YYINITIAL); return JSTokenTypes.AND;
          }
        case 138: break;
        case 65: 
          { yybegin(YYINITIAL); return JSTokenTypes.EQEQEQ;
          }
        case 139: break;
        case 71: 
          { yybegin(DIV_OR_GT); return JSTokenTypes.THIS_KEYWORD;
          }
        case 140: break;
        case 36: 
          { yybegin(YYINITIAL); return JSTokenTypes.MINUSEQ;
          }
        case 141: break;
        case 42: 
          { yybegin(YYINITIAL); return JSTokenTypes.DARROW;
          }
        case 142: break;
        case 37: 
          { yybegin(YYINITIAL); return JSTokenTypes.INTERPOLATION_STRING_LITERAL;
          }
        case 143: break;
        case 54: 
          { yybegin(YYINITIAL); return JSTokenTypes.DIVEQ;
          }
        case 144: break;
        case 64: 
          { yybegin(YYINITIAL); return JSTokenTypes.VAR_KEYWORD;
          }
        case 145: break;
        case 9: 
          { yybegin(YYINITIAL); return JSTokenTypes.SINGLE_QUOTE_STRING_LITERAL;
          }
        case 146: break;
        case 104: 
          { yybegin(YYINITIAL); return JSTokenTypes.PROTECTED_KEYWORD;
          }
        case 147: break;
        case 15: 
          { yybegin(YYINITIAL); return JSTokenTypes.PLUS;
          }
        case 148: break;
        case 33: 
          { return JSTokenTypes.END_OF_LINE_COMMENT;
          }
        case 149: break;
        case 74: 
          { yybegin(DIV_OR_GT); return JSTokenTypes.NULL_KEYWORD;
          }
        case 150: break;
        case 82: 
          { yybegin(YYINITIAL); return JSTokenTypes.CATCH_KEYWORD;
          }
        case 151: break;
        case 41: 
          { yybegin(YYINITIAL); return JSTokenTypes.EQEQ;
          }
        case 152: break;
        case 1: 
          { return JSTokenTypes.BAD_CHARACTER;
          }
        case 153: break;
        case 96: 
          { yybegin(YYINITIAL); return JSTokenTypes.FINALLY_KEYWORD;
          }
        case 154: break;
        case 92: 
          { yybegin(YYINITIAL); return JSTokenTypes.DELETE_KEYWORD;
          }
        case 155: break;
        case 79: 
          { yybegin(YYINITIAL); return JSTokenTypes.THROW_KEYWORD;
          }
        case 156: break;
        case 59: 
          { yybegin(YYINITIAL); return JSTokenTypes.DOT_DOT_DOT;
          }
        case 157: break;
        case 84: 
          { yybegin(YYINITIAL); return JSTokenTypes.CONST_KEYWORD;
          }
        case 158: break;
        case 48: 
          { yybegin(YYINITIAL); return JSTokenTypes.ANDEQ;
          }
        case 159: break;
        case 106: 
          { yybegin(YYINITIAL); return JSTokenTypes.IMPLEMENTS_KEYWORD;
          }
        case 160: break;
        case 57: 
          { yybegin(YYINITIAL); return JSTokenTypes.LTLT;
          }
        case 161: break;
        case 31: 
          { yybegin(YYINITIAL); return JSTokenTypes.LT;
          }
        case 162: break;
        case 77: 
          { yybegin(YYINITIAL); return JSTokenTypes.VOID_KEYWORD;
          }
        case 163: break;
        case 14: 
          { yybegin(YYINITIAL); return JSTokenTypes.EXCL;
          }
        case 164: break;
        case 39: 
          { yybegin(YYINITIAL); return JSTokenTypes.IF_KEYWORD;
          }
        case 165: break;
        case 99: 
          { yybegin(YYINITIAL); return JSTokenTypes.PACKAGE_KEYWORD;
          }
        case 166: break;
        case 66: 
          { yybegin(YYINITIAL); return JSTokenTypes.NEQEQ;
          }
        case 167: break;
        case 83: 
          { yybegin(YYINITIAL); return JSTokenTypes.CLASS_KEYWORD;
          }
        case 168: break;
        case 44: 
          { yybegin(YYINITIAL); return JSTokenTypes.PLUSEQ;
          }
        case 169: break;
        case 50: 
          { yybegin(YYINITIAL); return JSTokenTypes.OREQ;
          }
        case 170: break;
        case 101: 
          { yybegin(YYINITIAL); return JSTokenTypes.CONTINUE_KEYWORD;
          }
        case 171: break;
        case 68: 
          { yybegin(YYINITIAL); return JSTokenTypes.GTGTGT;
          }
        case 172: break;
        case 47: 
          { yybegin(YYINITIAL); return JSTokenTypes.GTGT;
          }
        case 173: break;
        case 103: 
          { yybegin(YYINITIAL); return JSTokenTypes.INTERFACE_KEYWORD;
          }
        case 174: break;
        case 27: 
          { yybegin(YYINITIAL); return JSTokenTypes.TILDE;
          }
        case 175: break;
        case 97: 
          { yybegin(YYINITIAL); return JSTokenTypes.DEFAULT_KEYWORD;
          }
        case 176: break;
        case 62: 
          { yybegin(YYINITIAL); return JSTokenTypes.LET_KEYWORD;
          }
        case 177: break;
        case 2: 
          { yybegin(DIV_OR_GT); return JSTokenTypes.NUMERIC_LITERAL;
          }
        case 178: break;
        case 19: 
          { yybegin(YYINITIAL); return JSTokenTypes.XOR;
          }
        case 179: break;
        case 30: 
          { yybegin(YYINITIAL); return JSTokenTypes.DIV;
          }
        case 180: break;
        case 16: 
          { yybegin(YYINITIAL); return JSTokenTypes.GT;
          }
        case 181: break;
        case 40: 
          { yybegin(YYINITIAL); return JSTokenTypes.IN_KEYWORD;
          }
        case 182: break;
        case 88: 
          { yybegin(YYINITIAL); return JSTokenTypes.RETURN_KEYWORD;
          }
        case 183: break;
        case 85: 
          { yybegin(YYINITIAL); return JSTokenTypes.YIELD_KEYWORD;
          }
        case 184: break;
        case 63: 
          { yybegin(YYINITIAL); return JSTokenTypes.NEW_KEYWORD;
          }
        case 185: break;
        case 80: 
          { yybegin(DIV_OR_GT); return JSTokenTypes.FALSE_KEYWORD;
          }
        case 186: break;
        case 18: 
          { yybegin(YYINITIAL); return JSTokenTypes.OR;
          }
        case 187: break;
        case 53: 
          { yybegin(YYINITIAL); return JSTokenTypes.PERCEQ;
          }
        case 188: break;
        case 89: 
          { yybegin(YYINITIAL); return JSTokenTypes.EXPORT_KEYWORD;
          }
        case 189: break;
        case 8: 
          { yybegin(YYINITIAL); return JSTokenTypes.MINUS;
          }
        case 190: break;
        case 73: 
          { yybegin(YYINITIAL); return JSTokenTypes.ENUM_KEYWORD;
          }
        case 191: break;
        case 35: 
          { return JSTokenTypes.MINUSMINUS;
          }
        case 192: break;
        case 93: 
          { yybegin(YYINITIAL); return JSTokenTypes.IMPORT_KEYWORD;
          }
        case 193: break;
        case 28: 
          { yybegin(YYINITIAL); return JSTokenTypes.QUEST;
          }
        case 194: break;
        case 81: 
          { yybegin(YYINITIAL); return JSTokenTypes.BREAK_KEYWORD;
          }
        case 195: break;
        case 7: 
          { yybegin(YYINITIAL); return JSTokenTypes.DOT;
          }
        case 196: break;
        case 75: 
          { yybegin(YYINITIAL); return JSTokenTypes.CASE_KEYWORD;
          }
        case 197: break;
        case 12: 
          { yybegin(DIV_OR_GT);       return JSTokenTypes.RBRACKET;
          }
        case 198: break;
        case 24: 
          { yybegin(YYINITIAL); return JSTokenTypes.RBRACE;
          }
        case 199: break;
        case 105: 
          { yybegin(YYINITIAL); return JSTokenTypes.INSTANCEOF_KEYWORD;
          }
        case 200: break;
        case 43: 
          { yybegin(YYINITIAL); return JSTokenTypes.NE;
          }
        case 201: break;
        case 23: 
          { yybegin(YYINITIAL); return JSTokenTypes.LBRACE;
          }
        case 202: break;
        case 98: 
          { yybegin(YYINITIAL); return JSTokenTypes.PRIVATE_KEYWORD;
          }
        case 203: break;
        case 94: 
          { yybegin(YYINITIAL); return JSTokenTypes.PUBLIC_KEYWORD;
          }
        case 204: break;
        case 22: 
          { yybegin(DIV_OR_GT);       return JSTokenTypes.RPAR;
          }
        case 205: break;
        case 95: 
          { yybegin(YYINITIAL); return JSTokenTypes.EXTENDS_KEYWORD;
          }
        case 206: break;
        case 20: 
          { yybegin(YYINITIAL); return JSTokenTypes.PERC;
          }
        case 207: break;
        case 76: 
          { yybegin(YYINITIAL); return JSTokenTypes.WITH_KEYWORD;
          }
        case 208: break;
        case 56: 
          { yybegin(YYINITIAL); return JSTokenTypes.LE;
          }
        case 209: break;
        case 11: 
          { yybegin(YYINITIAL); return JSTokenTypes.LBRACKET;
          }
        case 210: break;
        case 78: 
          { yybegin(YYINITIAL); return JSTokenTypes.GTGTGTEQ;
          }
        case 211: break;
        case 102: 
          { yybegin(DIV_OR_GT); return JSTokenTypes.UNDEFINED_KEYWORD;
          }
        case 212: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
