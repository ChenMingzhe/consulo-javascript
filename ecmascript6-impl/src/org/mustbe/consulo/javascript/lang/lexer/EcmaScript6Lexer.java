/* The following code was generated by JFlex 1.4.4 on 26.02.16 19:49 */

package org.mustbe.consulo.javascript.lang.lexer;

import com.intellij.lexer.LexerBase;
import com.intellij.psi.tree.IElementType;
import com.intellij.lang.javascript.JSTokenTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.4
 * on 26.02.16 19:49 from the specification file
 * <tt>R:/_github.com/consulo/consulo-javascript/ecmascript6-impl/src/org/mustbe/consulo/javascript/lang/lexer/ecmascript6.flex</tt>
 */
public class EcmaScript6Lexer extends LexerBase {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int DIV_OR_GT = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\5\1\3\1\16\1\0\1\3\1\10\16\5\4\0\1\3\1\55"+
    "\1\21\1\0\1\4\1\64\1\61\1\17\1\65\1\66\1\7\1\56"+
    "\1\72\1\15\1\13\1\6\1\11\7\1\2\1\1\75\1\71\1\57"+
    "\1\54\1\60\1\74\1\0\4\2\1\14\1\2\21\4\1\12\2\4"+
    "\1\23\1\20\1\24\1\63\1\4\1\22\1\34\1\42\1\44\1\40"+
    "\1\32\1\33\1\25\1\45\1\41\1\4\1\43\1\35\1\53\1\37"+
    "\1\46\1\51\1\4\1\30\1\36\1\27\1\31\1\52\1\50\1\26"+
    "\1\47\1\4\1\67\1\62\1\70\1\73\41\5\2\0\4\4\4\0"+
    "\1\4\2\0\1\5\7\0\1\4\4\0\1\4\5\0\27\4\1\0"+
    "\37\4\1\0\u013f\4\31\0\162\4\4\0\14\4\16\0\5\4\11\0"+
    "\1\4\21\0\130\5\5\0\23\5\12\0\1\4\13\0\1\4\1\0"+
    "\3\4\1\0\1\4\1\0\24\4\1\0\54\4\1\0\46\4\1\0"+
    "\5\4\4\0\202\4\1\0\4\5\3\0\105\4\1\0\46\4\2\0"+
    "\2\4\6\0\20\4\41\0\46\4\2\0\1\4\7\0\47\4\11\0"+
    "\21\5\1\0\27\5\1\0\3\5\1\0\1\5\1\0\2\5\1\0"+
    "\1\5\13\0\33\4\5\0\3\4\15\0\4\5\14\0\6\5\13\0"+
    "\32\4\5\0\13\4\16\5\7\0\12\5\4\0\2\4\1\5\143\4"+
    "\1\0\1\4\10\5\1\0\6\5\2\4\2\5\1\0\4\5\2\4"+
    "\12\5\3\4\2\0\1\4\17\0\1\5\1\4\1\5\36\4\33\5"+
    "\2\0\3\4\60\0\46\4\13\5\1\4\u014f\0\3\5\66\4\2\0"+
    "\1\5\1\4\20\5\2\0\1\4\4\5\3\0\12\4\2\5\2\0"+
    "\12\5\21\0\3\5\1\0\10\4\2\0\2\4\2\0\26\4\1\0"+
    "\7\4\1\0\1\4\3\0\4\4\2\0\1\5\1\4\7\5\2\0"+
    "\2\5\2\0\3\5\11\0\1\5\4\0\2\4\1\0\3\4\2\5"+
    "\2\0\12\5\4\4\15\0\3\5\1\0\6\4\4\0\2\4\2\0"+
    "\26\4\1\0\7\4\1\0\2\4\1\0\2\4\1\0\2\4\2\0"+
    "\1\5\1\0\5\5\4\0\2\5\2\0\3\5\13\0\4\4\1\0"+
    "\1\4\7\0\14\5\3\4\14\0\3\5\1\0\11\4\1\0\3\4"+
    "\1\0\26\4\1\0\7\4\1\0\2\4\1\0\5\4\2\0\1\5"+
    "\1\4\10\5\1\0\3\5\1\0\3\5\2\0\1\4\17\0\2\4"+
    "\2\5\2\0\12\5\1\0\1\4\17\0\3\5\1\0\10\4\2\0"+
    "\2\4\2\0\26\4\1\0\7\4\1\0\2\4\1\0\5\4\2\0"+
    "\1\5\1\4\6\5\3\0\2\5\2\0\3\5\10\0\2\5\4\0"+
    "\2\4\1\0\3\4\4\0\12\5\1\0\1\4\20\0\1\5\1\4"+
    "\1\0\6\4\3\0\3\4\1\0\4\4\3\0\2\4\1\0\1\4"+
    "\1\0\2\4\3\0\2\4\3\0\3\4\3\0\10\4\1\0\3\4"+
    "\4\0\5\5\3\0\3\5\1\0\4\5\11\0\1\5\17\0\11\5"+
    "\11\0\1\4\7\0\3\5\1\0\10\4\1\0\3\4\1\0\27\4"+
    "\1\0\12\4\1\0\5\4\4\0\7\5\1\0\3\5\1\0\4\5"+
    "\7\0\2\5\11\0\2\4\4\0\12\5\22\0\2\5\1\0\10\4"+
    "\1\0\3\4\1\0\27\4\1\0\12\4\1\0\5\4\2\0\1\5"+
    "\1\4\7\5\1\0\3\5\1\0\4\5\7\0\2\5\7\0\1\4"+
    "\1\0\2\4\4\0\12\5\22\0\2\5\1\0\10\4\1\0\3\4"+
    "\1\0\27\4\1\0\20\4\4\0\6\5\2\0\3\5\1\0\4\5"+
    "\11\0\1\5\10\0\2\4\4\0\12\5\22\0\2\5\1\0\22\4"+
    "\3\0\30\4\1\0\11\4\1\0\1\4\2\0\7\4\3\0\1\5"+
    "\4\0\6\5\1\0\1\5\1\0\10\5\22\0\2\5\15\0\60\4"+
    "\1\5\2\4\7\5\4\0\10\4\10\5\1\0\12\5\47\0\2\4"+
    "\1\0\1\4\2\0\2\4\1\0\1\4\2\0\1\4\6\0\4\4"+
    "\1\0\7\4\1\0\3\4\1\0\1\4\1\0\1\4\2\0\2\4"+
    "\1\0\4\4\1\5\2\4\6\5\1\0\2\5\1\4\2\0\5\4"+
    "\1\0\1\4\1\0\6\5\2\0\12\5\2\0\2\4\42\0\1\4"+
    "\27\0\2\5\6\0\12\5\13\0\1\5\1\0\1\5\1\0\1\5"+
    "\4\0\2\5\10\4\1\0\42\4\6\0\24\5\1\0\2\5\4\4"+
    "\4\0\10\5\1\0\44\5\11\0\1\5\71\0\42\4\1\0\5\4"+
    "\1\0\2\4\1\0\7\5\3\0\4\5\6\0\12\5\6\0\6\4"+
    "\4\5\106\0\46\4\12\0\51\4\7\0\132\4\5\0\104\4\5\0"+
    "\122\4\6\0\7\4\1\0\77\4\1\0\1\4\1\0\4\4\2\0"+
    "\7\4\1\0\1\4\1\0\4\4\2\0\47\4\1\0\1\4\1\0"+
    "\4\4\2\0\37\4\1\0\1\4\1\0\4\4\2\0\7\4\1\0"+
    "\1\4\1\0\4\4\2\0\7\4\1\0\7\4\1\0\27\4\1\0"+
    "\37\4\1\0\1\4\1\0\4\4\2\0\7\4\1\0\47\4\1\0"+
    "\23\4\16\0\11\5\56\0\125\4\14\0\u026c\4\2\0\10\4\12\0"+
    "\32\4\5\0\113\4\3\0\3\4\17\0\15\4\1\0\4\4\3\5"+
    "\13\0\22\4\3\5\13\0\22\4\2\5\14\0\15\4\1\0\3\4"+
    "\1\0\2\5\14\0\64\4\40\5\3\0\1\4\3\0\2\4\1\5"+
    "\2\0\12\5\41\0\3\5\2\0\12\5\6\0\130\4\10\0\51\4"+
    "\1\5\126\0\35\4\3\0\14\5\4\0\14\5\12\0\12\5\36\4"+
    "\2\0\5\4\u038b\0\154\4\224\0\234\4\4\0\132\4\6\0\26\4"+
    "\2\0\6\4\2\0\46\4\2\0\6\4\2\0\10\4\1\0\1\4"+
    "\1\0\1\4\1\0\1\4\1\0\37\4\2\0\65\4\1\0\7\4"+
    "\1\0\1\4\3\0\3\4\1\0\7\4\3\0\4\4\2\0\6\4"+
    "\4\0\15\4\5\0\3\4\1\0\7\4\17\0\4\5\32\0\5\5"+
    "\20\0\2\4\23\0\1\4\13\0\4\5\6\0\6\5\1\0\1\4"+
    "\15\0\1\4\40\0\22\4\36\0\15\5\4\0\1\5\3\0\6\5"+
    "\27\0\1\4\4\0\1\4\2\0\12\4\1\0\1\4\3\0\5\4"+
    "\6\0\1\4\1\0\1\4\1\0\1\4\1\0\4\4\1\0\3\4"+
    "\1\0\7\4\3\0\3\4\5\0\5\4\26\0\44\4\u0e81\0\3\4"+
    "\31\0\11\4\6\5\1\0\5\4\2\0\5\4\4\0\126\4\2\0"+
    "\2\5\2\0\3\4\1\0\137\4\5\0\50\4\4\0\136\4\21\0"+
    "\30\4\70\0\20\4\u0200\0\u19b6\4\112\0\u51a6\4\132\0\u048d\4\u0773\0"+
    "\u2ba4\4\u215c\0\u012e\4\2\0\73\4\225\0\7\4\14\0\5\4\5\0"+
    "\1\4\1\5\12\4\1\0\15\4\1\0\5\4\1\0\1\4\1\0"+
    "\2\4\1\0\2\4\1\0\154\4\41\0\u016b\4\22\0\100\4\2\0"+
    "\66\4\50\0\15\4\3\0\20\5\20\0\4\5\17\0\2\4\30\0"+
    "\3\4\31\0\1\4\6\0\5\4\1\0\207\4\2\0\1\5\4\0"+
    "\1\4\13\0\12\5\7\0\32\4\4\0\1\4\1\0\32\4\12\0"+
    "\132\4\3\0\6\4\2\0\6\4\2\0\6\4\2\0\3\4\3\0"+
    "\2\4\3\0\2\4\22\0\3\5\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\1\6\1\2"+
    "\1\7\1\10\1\11\1\12\1\1\1\13\1\14\20\3"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\6\1\37\2\2\1\40\1\41\1\42"+
    "\1\0\1\40\1\2\1\43\1\44\2\11\2\12\1\0"+
    "\1\45\22\3\1\46\1\47\1\50\15\3\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\70\1\2\1\40"+
    "\1\42\1\71\1\40\2\0\2\11\2\12\1\3\1\72"+
    "\14\3\1\73\1\74\3\3\1\75\21\3\1\76\1\3"+
    "\1\77\1\100\1\101\1\102\1\103\1\0\2\71\1\104"+
    "\1\3\1\105\5\3\1\106\1\107\5\3\1\110\10\3"+
    "\1\111\4\3\1\112\5\3\1\113\1\114\1\42\1\0"+
    "\1\115\6\3\1\116\11\3\1\117\1\120\1\121\1\3"+
    "\1\122\1\123\1\124\4\3\1\125\1\126\2\3\1\127"+
    "\2\3\1\130\1\131\1\3\1\132\3\3\1\133\3\3"+
    "\1\134\2\3\1\135\1\3\1\136\1\137\4\3\1\140"+
    "\1\3\1\141\1\3\1\142\3\3\1\143\1\3\1\144"+
    "\1\145\2\3\1\146\1\147\1\150";

  private static int [] zzUnpackAction() {
    int [] result = new int[289];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\370\0\u0136\0\u0174\0\174"+
    "\0\u01b2\0\u01f0\0\u022e\0\u026c\0\u02aa\0\u02e8\0\174\0\174"+
    "\0\u0326\0\u0364\0\u03a2\0\u03e0\0\u041e\0\u045c\0\u049a\0\u04d8"+
    "\0\u0516\0\u0554\0\u0592\0\u05d0\0\u060e\0\u064c\0\u068a\0\u06c8"+
    "\0\u0706\0\u0744\0\u0782\0\u07c0\0\u07fe\0\u083c\0\u087a\0\u08b8"+
    "\0\174\0\174\0\174\0\174\0\174\0\174\0\174\0\174"+
    "\0\174\0\u08f6\0\u0934\0\u0972\0\u09b0\0\u09ee\0\u0a2c\0\u0a6a"+
    "\0\u0aa8\0\u0ae6\0\u0b24\0\u0b62\0\174\0\174\0\174\0\u0ba0"+
    "\0\u0bde\0\174\0\u02e8\0\u02e8\0\u0c1c\0\u0c5a\0\u0c98\0\u0cd6"+
    "\0\u0d14\0\u0d52\0\u0d90\0\u0dce\0\u0e0c\0\u0e4a\0\u0e88\0\u0ec6"+
    "\0\u0f04\0\u0f42\0\u0f80\0\u0fbe\0\u0ffc\0\u103a\0\370\0\370"+
    "\0\u1078\0\u10b6\0\u10f4\0\u1132\0\u1170\0\u11ae\0\u11ec\0\u122a"+
    "\0\u1268\0\u12a6\0\u12e4\0\u1322\0\u1360\0\u139e\0\u13dc\0\u141a"+
    "\0\174\0\174\0\174\0\u1458\0\174\0\174\0\174\0\174"+
    "\0\174\0\174\0\174\0\174\0\174\0\u1496\0\u14d4\0\u1512"+
    "\0\u1550\0\u158e\0\u15cc\0\u160a\0\u1648\0\u1686\0\u16c4\0\u1702"+
    "\0\u1740\0\u177e\0\370\0\u17bc\0\u17fa\0\u1838\0\u1876\0\u18b4"+
    "\0\u18f2\0\u1930\0\u196e\0\u19ac\0\u19ea\0\u1a28\0\u1a66\0\370"+
    "\0\370\0\u1aa4\0\u1ae2\0\u1b20\0\370\0\u1b5e\0\u1b9c\0\u1bda"+
    "\0\u1c18\0\u1c56\0\u1c94\0\u1cd2\0\u1d10\0\u1d4e\0\u1d8c\0\u1dca"+
    "\0\u1e08\0\u1e46\0\u1e84\0\u1ec2\0\u1f00\0\u1f3e\0\370\0\u1f7c"+
    "\0\174\0\174\0\174\0\u1fba\0\174\0\u1ff8\0\u2036\0\174"+
    "\0\370\0\u2074\0\370\0\u20b2\0\u20f0\0\u212e\0\u216c\0\u21aa"+
    "\0\370\0\370\0\u21e8\0\u2226\0\u2264\0\u22a2\0\u22e0\0\370"+
    "\0\u231e\0\u235c\0\u239a\0\u23d8\0\u2416\0\u2454\0\u2492\0\u24d0"+
    "\0\370\0\u250e\0\u254c\0\u258a\0\u25c8\0\370\0\u2606\0\u2644"+
    "\0\u2682\0\u26c0\0\u26fe\0\370\0\174\0\174\0\u273c\0\370"+
    "\0\u277a\0\u27b8\0\u27f6\0\u2834\0\u2872\0\u28b0\0\370\0\u28ee"+
    "\0\u292c\0\u296a\0\u29a8\0\u29e6\0\u2a24\0\u2a62\0\u2aa0\0\u2ade"+
    "\0\370\0\370\0\370\0\u2b1c\0\370\0\370\0\370\0\u2b5a"+
    "\0\u2b98\0\u2bd6\0\u2c14\0\370\0\370\0\u2c52\0\u2c90\0\370"+
    "\0\u2cce\0\u2d0c\0\370\0\370\0\u2d4a\0\370\0\u2d88\0\u2dc6"+
    "\0\u2e04\0\370\0\u2e42\0\u2e80\0\u2ebe\0\370\0\u2efc\0\u2f3a"+
    "\0\370\0\u2f78\0\370\0\370\0\u2fb6\0\u2ff4\0\u3032\0\u3070"+
    "\0\370\0\u30ae\0\370\0\u30ec\0\370\0\u312a\0\u3168\0\u31a6"+
    "\0\370\0\u31e4\0\370\0\370\0\u3222\0\u3260\0\370\0\370"+
    "\0\370";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[289];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\5\1\3\1\7\1\10"+
    "\1\6\1\11\1\5\1\12\1\5\1\13\1\6\1\14"+
    "\1\3\1\15\1\16\1\17\1\20\2\5\1\21\1\22"+
    "\1\23\1\24\1\25\1\5\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\5\1\34\2\5\1\35\1\36\1\37"+
    "\1\40\1\5\1\41\1\42\1\43\1\3\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\3\1\4\1\5\1\6"+
    "\1\5\1\3\1\62\1\63\1\6\1\11\1\5\1\12"+
    "\1\5\1\13\1\6\1\14\1\3\1\15\1\16\1\17"+
    "\1\20\2\5\1\21\1\22\1\23\1\24\1\25\1\5"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\5\1\34"+
    "\2\5\1\35\1\36\1\37\1\40\1\5\1\41\1\42"+
    "\1\43\1\64\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\77\0\1\4\7\0\1\4\1\0\1\65\1\66\15\0"+
    "\1\66\44\0\2\5\1\0\2\5\3\0\2\5\1\0"+
    "\1\5\10\0\27\5\25\0\1\6\4\0\1\6\5\0"+
    "\1\6\57\0\6\67\1\70\1\71\1\0\5\67\1\0"+
    "\1\67\1\72\2\67\1\73\52\67\1\0\1\4\7\0"+
    "\1\4\1\74\1\65\1\66\11\0\1\74\3\0\1\66"+
    "\44\0\1\65\7\0\1\65\101\0\1\75\36\0\1\76"+
    "\21\0\10\14\1\0\5\14\1\0\1\77\1\100\55\14"+
    "\10\15\1\0\5\15\1\0\1\15\1\101\1\102\54\15"+
    "\22\103\1\104\53\103\1\0\2\5\1\0\2\5\3\0"+
    "\2\5\1\0\1\5\10\0\3\5\1\105\14\5\1\106"+
    "\1\5\1\107\4\5\23\0\2\5\1\0\2\5\3\0"+
    "\2\5\1\0\1\5\10\0\5\5\1\110\21\5\23\0"+
    "\2\5\1\0\2\5\3\0\2\5\1\0\1\5\10\0"+
    "\12\5\1\111\14\5\23\0\2\5\1\0\2\5\3\0"+
    "\2\5\1\0\1\5\10\0\1\5\1\112\6\5\1\113"+
    "\1\5\1\114\14\5\23\0\2\5\1\0\2\5\3\0"+
    "\2\5\1\0\1\5\10\0\4\5\1\115\2\5\1\116"+
    "\4\5\1\117\4\5\1\120\5\5\23\0\2\5\1\0"+
    "\2\5\3\0\2\5\1\0\1\5\10\0\5\5\1\121"+
    "\21\5\23\0\2\5\1\0\2\5\3\0\2\5\1\0"+
    "\1\5\10\0\2\5\1\122\20\5\1\123\3\5\23\0"+
    "\2\5\1\0\2\5\3\0\2\5\1\0\1\5\10\0"+
    "\4\5\1\124\1\125\21\5\23\0\2\5\1\0\2\5"+
    "\3\0\2\5\1\0\1\5\10\0\5\5\1\126\13\5"+
    "\1\127\5\5\23\0\2\5\1\0\2\5\3\0\2\5"+
    "\1\0\1\5\10\0\6\5\1\130\3\5\1\131\13\5"+
    "\1\132\23\0\2\5\1\0\2\5\3\0\2\5\1\0"+
    "\1\5\10\0\3\5\1\133\23\5\23\0\2\5\1\0"+
    "\2\5\3\0\2\5\1\0\1\5\10\0\7\5\1\134"+
    "\1\135\10\5\1\136\5\5\23\0\2\5\1\0\2\5"+
    "\3\0\2\5\1\0\1\5\10\0\14\5\1\137\12\5"+
    "\23\0\2\5\1\0\2\5\3\0\2\5\1\0\1\5"+
    "\10\0\14\5\1\140\3\5\1\141\6\5\23\0\2\5"+
    "\1\0\2\5\3\0\2\5\1\0\1\5\10\0\3\5"+
    "\1\142\1\143\2\5\1\144\17\5\23\0\2\5\1\0"+
    "\2\5\3\0\2\5\1\0\1\5\10\0\7\5\1\145"+
    "\11\5\1\146\5\5\76\0\1\147\75\0\1\150\75\0"+
    "\1\151\1\0\1\152\73\0\1\153\3\0\1\154\71\0"+
    "\1\155\4\0\1\156\70\0\1\157\5\0\1\160\67\0"+
    "\1\161\75\0\1\162\27\0\1\70\1\71\44\0\1\163"+
    "\75\0\1\164\75\0\1\165\2\0\1\166\17\0\1\65"+
    "\7\0\1\65\2\0\1\66\15\0\1\66\44\0\1\167"+
    "\7\0\1\167\3\0\1\167\40\0\1\167\17\0\6\67"+
    "\1\170\1\67\1\0\5\67\1\0\1\67\1\72\2\67"+
    "\1\73\52\67\10\70\1\0\5\70\1\0\57\70\7\171"+
    "\1\172\66\171\10\67\1\0\5\67\1\0\57\67\6\73"+
    "\1\173\1\73\1\174\5\73\1\174\1\73\1\175\3\73"+
    "\1\67\51\73\1\0\2\74\6\0\1\74\2\0\1\74"+
    "\15\0\3\74\3\0\1\74\1\0\1\74\1\0\1\74"+
    "\31\0\3\14\1\176\4\14\1\177\65\14\3\15\1\200"+
    "\4\15\1\201\65\15\1\0\2\5\1\0\2\5\3\0"+
    "\2\5\1\0\1\5\10\0\4\5\1\202\15\5\1\203"+
    "\4\5\23\0\2\5\1\0\2\5\3\0\2\5\1\0"+
    "\1\5\10\0\3\5\1\204\10\5\1\205\12\5\23\0"+
    "\2\5\1\0\2\5\3\0\2\5\1\0\1\5\10\0"+
    "\24\5\1\206\2\5\23\0\2\5\1\0\2\5\3\0"+
    "\2\5\1\0\1\5\10\0\2\5\1\207\24\5\23\0"+
    "\2\5\1\0\2\5\3\0\2\5\1\0\1\5\10\0"+
    "\13\5\1\210\13\5\23\0\2\5\1\0\2\5\3\0"+
    "\2\5\1\0\1\5\10\0\2\5\1\211\21\5\1\212"+
    "\2\5\23\0\2\5\1\0\2\5\3\0\2\5\1\0"+
    "\1\5\10\0\11\5\1\213\15\5\23\0\2\5\1\0"+
    "\2\5\3\0\2\5\1\0\1\5\10\0\4\5\1\214"+
    "\22\5\23\0\2\5\1\0\2\5\3\0\2\5\1\0"+
    "\1\5\10\0\12\5\1\215\14\5\23\0\2\5\1\0"+
    "\2\5\3\0\2\5\1\0\1\5\10\0\10\5\1\216"+
    "\16\5\23\0\2\5\1\0\2\5\3\0\2\5\1\0"+
    "\1\5\10\0\12\5\1\217\14\5\23\0\2\5\1\0"+
    "\2\5\3\0\2\5\1\0\1\5\10\0\3\5\1\220"+
    "\23\5\23\0\2\5\1\0\2\5\3\0\2\5\1\0"+
    "\1\5\10\0\2\5\1\221\24\5\23\0\2\5\1\0"+
    "\2\5\3\0\2\5\1\0\1\5\10\0\7\5\1\222"+
    "\17\5\23\0\2\5\1\0\2\5\3\0\2\5\1\0"+
    "\1\5\10\0\14\5\1\223\12\5\23\0\2\5\1\0"+
    "\2\5\3\0\2\5\1\0\1\5\10\0\10\5\1\224"+
    "\16\5\23\0\2\5\1\0\2\5\3\0\2\5\1\0"+
    "\1\5\10\0\23\5\1\225\3\5\23\0\2\5\1\0"+
    "\2\5\3\0\2\5\1\0\1\5\10\0\6\5\1\226"+
    "\1\5\1\227\16\5\23\0\2\5\1\0\2\5\3\0"+
    "\2\5\1\0\1\5\10\0\2\5\1\230\6\5\1\231"+
    "\15\5\23\0\2\5\1\0\2\5\3\0\2\5\1\0"+
    "\1\5\10\0\24\5\1\232\2\5\23\0\2\5\1\0"+
    "\2\5\3\0\2\5\1\0\1\5\10\0\5\5\1\233"+
    "\21\5\23\0\2\5\1\0\2\5\3\0\2\5\1\0"+
    "\1\5\10\0\2\5\1\234\6\5\1\235\15\5\23\0"+
    "\2\5\1\0\2\5\3\0\2\5\1\0\1\5\10\0"+
    "\7\5\1\236\17\5\23\0\2\5\1\0\2\5\3\0"+
    "\2\5\1\0\1\5\10\0\12\5\1\237\14\5\23\0"+
    "\2\5\1\0\2\5\3\0\2\5\1\0\1\5\10\0"+
    "\5\5\1\240\21\5\23\0\2\5\1\0\2\5\3\0"+
    "\2\5\1\0\1\5\10\0\2\5\1\241\24\5\23\0"+
    "\2\5\1\0\2\5\3\0\2\5\1\0\1\5\10\0"+
    "\14\5\1\242\12\5\23\0\2\5\1\0\2\5\3\0"+
    "\2\5\1\0\1\5\10\0\14\5\1\243\4\5\1\244"+
    "\5\5\23\0\2\5\1\0\2\5\3\0\2\5\1\0"+
    "\1\5\10\0\15\5\1\245\11\5\23\0\2\5\1\0"+
    "\2\5\3\0\2\5\1\0\1\5\10\0\17\5\1\246"+
    "\7\5\23\0\2\5\1\0\2\5\3\0\2\5\1\0"+
    "\1\5\10\0\3\5\1\247\23\5\23\0\2\5\1\0"+
    "\2\5\3\0\2\5\1\0\1\5\10\0\14\5\1\250"+
    "\12\5\76\0\1\251\75\0\1\252\75\0\1\253\3\0"+
    "\1\254\71\0\1\255\22\0\1\167\7\0\1\167\111\0"+
    "\2\170\12\0\1\170\11\0\1\170\22\0\7\171\1\256"+
    "\66\171\6\257\1\260\1\172\66\257\24\174\1\67\2\173"+
    "\12\174\1\173\11\174\1\173\46\174\1\67\51\174\10\73"+
    "\1\174\5\73\1\174\5\73\1\67\51\73\3\14\1\176"+
    "\4\14\1\177\6\14\1\77\1\100\65\14\1\0\6\14"+
    "\1\77\1\100\55\14\3\15\1\200\4\15\1\201\7\15"+
    "\1\101\1\102\64\15\1\0\7\15\1\101\1\102\54\15"+
    "\1\0\2\5\1\0\2\5\3\0\2\5\1\0\1\5"+
    "\10\0\5\5\1\261\21\5\23\0\2\5\1\0\2\5"+
    "\3\0\2\5\1\0\1\5\10\0\21\5\1\262\5\5"+
    "\23\0\2\5\1\0\2\5\3\0\2\5\1\0\1\5"+
    "\10\0\11\5\1\263\15\5\23\0\2\5\1\0\2\5"+
    "\3\0\2\5\1\0\1\5\10\0\5\5\1\264\21\5"+
    "\23\0\2\5\1\0\2\5\3\0\2\5\1\0\1\5"+
    "\10\0\4\5\1\265\22\5\23\0\2\5\1\0\2\5"+
    "\3\0\2\5\1\0\1\5\10\0\5\5\1\266\21\5"+
    "\23\0\2\5\1\0\2\5\3\0\2\5\1\0\1\5"+
    "\10\0\5\5\1\267\21\5\23\0\2\5\1\0\2\5"+
    "\3\0\2\5\1\0\1\5\10\0\21\5\1\270\5\5"+
    "\23\0\2\5\1\0\2\5\3\0\2\5\1\0\1\5"+
    "\10\0\5\5\1\271\21\5\23\0\2\5\1\0\2\5"+
    "\3\0\2\5\1\0\1\5\10\0\26\5\1\272\23\0"+
    "\2\5\1\0\2\5\3\0\2\5\1\0\1\5\10\0"+
    "\17\5\1\273\7\5\23\0\2\5\1\0\2\5\3\0"+
    "\2\5\1\0\1\5\10\0\11\5\1\274\15\5\23\0"+
    "\2\5\1\0\2\5\3\0\2\5\1\0\1\5\10\0"+
    "\7\5\1\275\17\5\23\0\2\5\1\0\2\5\3\0"+
    "\2\5\1\0\1\5\10\0\2\5\1\276\24\5\23\0"+
    "\2\5\1\0\2\5\3\0\2\5\1\0\1\5\10\0"+
    "\2\5\1\277\24\5\23\0\2\5\1\0\2\5\3\0"+
    "\2\5\1\0\1\5\10\0\10\5\1\300\16\5\23\0"+
    "\2\5\1\0\2\5\3\0\2\5\1\0\1\5\10\0"+
    "\7\5\1\301\17\5\23\0\2\5\1\0\2\5\3\0"+
    "\2\5\1\0\1\5\10\0\5\5\1\302\21\5\23\0"+
    "\2\5\1\0\2\5\3\0\2\5\1\0\1\5\10\0"+
    "\5\5\1\303\21\5\23\0\2\5\1\0\2\5\3\0"+
    "\2\5\1\0\1\5\10\0\2\5\1\304\24\5\23\0"+
    "\2\5\1\0\2\5\3\0\2\5\1\0\1\5\10\0"+
    "\10\5\1\305\10\5\1\306\5\5\23\0\2\5\1\0"+
    "\2\5\3\0\2\5\1\0\1\5\10\0\7\5\1\307"+
    "\17\5\23\0\2\5\1\0\2\5\3\0\2\5\1\0"+
    "\1\5\10\0\17\5\1\310\7\5\23\0\2\5\1\0"+
    "\2\5\3\0\2\5\1\0\1\5\10\0\5\5\1\311"+
    "\21\5\23\0\2\5\1\0\2\5\3\0\2\5\1\0"+
    "\1\5\10\0\11\5\1\312\15\5\23\0\2\5\1\0"+
    "\2\5\3\0\2\5\1\0\1\5\10\0\2\5\1\313"+
    "\6\5\1\314\15\5\23\0\2\5\1\0\2\5\3\0"+
    "\2\5\1\0\1\5\10\0\10\5\1\315\16\5\23\0"+
    "\2\5\1\0\2\5\3\0\2\5\1\0\1\5\10\0"+
    "\20\5\1\316\6\5\23\0\2\5\1\0\2\5\3\0"+
    "\2\5\1\0\1\5\10\0\10\5\1\317\16\5\23\0"+
    "\2\5\1\0\2\5\3\0\2\5\1\0\1\5\10\0"+
    "\25\5\1\320\1\5\23\0\2\5\1\0\2\5\3\0"+
    "\2\5\1\0\1\5\10\0\2\5\1\321\24\5\23\0"+
    "\2\5\1\0\2\5\3\0\2\5\1\0\1\5\10\0"+
    "\10\5\1\322\16\5\23\0\2\5\1\0\2\5\3\0"+
    "\2\5\1\0\1\5\10\0\16\5\1\323\10\5\23\0"+
    "\2\5\1\0\2\5\3\0\2\5\1\0\1\5\10\0"+
    "\13\5\1\324\13\5\76\0\1\325\21\0\6\171\1\326"+
    "\1\256\66\171\7\257\1\327\66\257\1\0\2\5\1\0"+
    "\2\5\3\0\2\5\1\0\1\5\10\0\23\5\1\330"+
    "\3\5\23\0\2\5\1\0\2\5\3\0\2\5\1\0"+
    "\1\5\10\0\21\5\1\331\5\5\23\0\2\5\1\0"+
    "\2\5\3\0\2\5\1\0\1\5\10\0\3\5\1\332"+
    "\23\5\23\0\2\5\1\0\2\5\3\0\2\5\1\0"+
    "\1\5\10\0\6\5\1\333\20\5\23\0\2\5\1\0"+
    "\2\5\3\0\2\5\1\0\1\5\10\0\12\5\1\334"+
    "\14\5\23\0\2\5\1\0\2\5\3\0\2\5\1\0"+
    "\1\5\10\0\3\5\1\335\23\5\23\0\2\5\1\0"+
    "\2\5\3\0\2\5\1\0\1\5\10\0\2\5\1\336"+
    "\24\5\23\0\2\5\1\0\2\5\3\0\2\5\1\0"+
    "\1\5\10\0\5\5\1\337\21\5\23\0\2\5\1\0"+
    "\2\5\3\0\2\5\1\0\1\5\10\0\10\5\1\340"+
    "\16\5\23\0\2\5\1\0\2\5\3\0\2\5\1\0"+
    "\1\5\10\0\14\5\1\341\12\5\23\0\2\5\1\0"+
    "\2\5\3\0\2\5\1\0\1\5\10\0\17\5\1\342"+
    "\7\5\23\0\2\5\1\0\2\5\3\0\2\5\1\0"+
    "\1\5\10\0\4\5\1\343\22\5\23\0\2\5\1\0"+
    "\2\5\3\0\2\5\1\0\1\5\10\0\2\5\1\344"+
    "\24\5\23\0\2\5\1\0\2\5\3\0\2\5\1\0"+
    "\1\5\10\0\3\5\1\345\23\5\23\0\2\5\1\0"+
    "\2\5\3\0\2\5\1\0\1\5\10\0\7\5\1\346"+
    "\17\5\23\0\2\5\1\0\2\5\3\0\2\5\1\0"+
    "\1\5\10\0\5\5\1\347\21\5\23\0\2\5\1\0"+
    "\2\5\3\0\2\5\1\0\1\5\10\0\3\5\1\350"+
    "\23\5\23\0\2\5\1\0\2\5\3\0\2\5\1\0"+
    "\1\5\10\0\16\5\1\351\10\5\23\0\2\5\1\0"+
    "\2\5\3\0\2\5\1\0\1\5\10\0\20\5\1\352"+
    "\6\5\23\0\2\5\1\0\2\5\3\0\2\5\1\0"+
    "\1\5\10\0\11\5\1\353\15\5\23\0\2\5\1\0"+
    "\2\5\3\0\2\5\1\0\1\5\10\0\14\5\1\354"+
    "\12\5\23\0\2\5\1\0\2\5\3\0\2\5\1\0"+
    "\1\5\10\0\2\5\1\355\24\5\23\0\2\5\1\0"+
    "\2\5\3\0\2\5\1\0\1\5\10\0\13\5\1\356"+
    "\13\5\23\0\2\5\1\0\2\5\3\0\2\5\1\0"+
    "\1\5\10\0\5\5\1\357\21\5\23\0\2\5\1\0"+
    "\2\5\3\0\2\5\1\0\1\5\10\0\7\5\1\360"+
    "\17\5\23\0\2\5\1\0\2\5\3\0\2\5\1\0"+
    "\1\5\10\0\5\5\1\361\21\5\23\0\2\5\1\0"+
    "\2\5\3\0\2\5\1\0\1\5\10\0\14\5\1\362"+
    "\12\5\23\0\2\5\1\0\2\5\3\0\2\5\1\0"+
    "\1\5\10\0\7\5\1\363\17\5\22\0\6\257\1\260"+
    "\1\327\66\257\1\0\2\5\1\0\2\5\3\0\2\5"+
    "\1\0\1\5\10\0\6\5\1\364\20\5\23\0\2\5"+
    "\1\0\2\5\3\0\2\5\1\0\1\5\10\0\12\5"+
    "\1\365\14\5\23\0\2\5\1\0\2\5\3\0\2\5"+
    "\1\0\1\5\10\0\14\5\1\366\12\5\23\0\2\5"+
    "\1\0\2\5\3\0\2\5\1\0\1\5\10\0\13\5"+
    "\1\367\13\5\23\0\2\5\1\0\2\5\3\0\2\5"+
    "\1\0\1\5\10\0\2\5\1\370\24\5\23\0\2\5"+
    "\1\0\2\5\3\0\2\5\1\0\1\5\10\0\14\5"+
    "\1\371\12\5\23\0\2\5\1\0\2\5\3\0\2\5"+
    "\1\0\1\5\10\0\10\5\1\372\16\5\23\0\2\5"+
    "\1\0\2\5\3\0\2\5\1\0\1\5\10\0\17\5"+
    "\1\373\7\5\23\0\2\5\1\0\2\5\3\0\2\5"+
    "\1\0\1\5\10\0\20\5\1\374\6\5\23\0\2\5"+
    "\1\0\2\5\3\0\2\5\1\0\1\5\10\0\10\5"+
    "\1\375\16\5\23\0\2\5\1\0\2\5\3\0\2\5"+
    "\1\0\1\5\10\0\5\5\1\376\21\5\23\0\2\5"+
    "\1\0\2\5\3\0\2\5\1\0\1\5\10\0\6\5"+
    "\1\377\20\5\23\0\2\5\1\0\2\5\3\0\2\5"+
    "\1\0\1\5\10\0\12\5\1\u0100\14\5\23\0\2\5"+
    "\1\0\2\5\3\0\2\5\1\0\1\5\10\0\26\5"+
    "\1\u0101\23\0\2\5\1\0\2\5\3\0\2\5\1\0"+
    "\1\5\10\0\2\5\1\u0102\24\5\23\0\2\5\1\0"+
    "\2\5\3\0\2\5\1\0\1\5\10\0\12\5\1\u0103"+
    "\14\5\23\0\2\5\1\0\2\5\3\0\2\5\1\0"+
    "\1\5\10\0\2\5\1\u0104\24\5\23\0\2\5\1\0"+
    "\2\5\3\0\2\5\1\0\1\5\10\0\17\5\1\u0105"+
    "\7\5\23\0\2\5\1\0\2\5\3\0\2\5\1\0"+
    "\1\5\10\0\17\5\1\u0106\7\5\23\0\2\5\1\0"+
    "\2\5\3\0\2\5\1\0\1\5\10\0\1\u0107\26\5"+
    "\23\0\2\5\1\0\2\5\3\0\2\5\1\0\1\5"+
    "\10\0\12\5\1\u0108\14\5\23\0\2\5\1\0\2\5"+
    "\3\0\2\5\1\0\1\5\10\0\11\5\1\u0109\15\5"+
    "\23\0\2\5\1\0\2\5\3\0\2\5\1\0\1\5"+
    "\10\0\21\5\1\u010a\5\5\23\0\2\5\1\0\2\5"+
    "\3\0\2\5\1\0\1\5\10\0\22\5\1\u010b\4\5"+
    "\23\0\2\5\1\0\2\5\3\0\2\5\1\0\1\5"+
    "\10\0\2\5\1\u010c\24\5\23\0\2\5\1\0\2\5"+
    "\3\0\2\5\1\0\1\5\10\0\7\5\1\u010d\17\5"+
    "\23\0\2\5\1\0\2\5\3\0\2\5\1\0\1\5"+
    "\10\0\17\5\1\u010e\7\5\23\0\2\5\1\0\2\5"+
    "\3\0\2\5\1\0\1\5\10\0\5\5\1\u010f\21\5"+
    "\23\0\2\5\1\0\2\5\3\0\2\5\1\0\1\5"+
    "\10\0\4\5\1\u0110\22\5\23\0\2\5\1\0\2\5"+
    "\3\0\2\5\1\0\1\5\10\0\5\5\1\u0111\21\5"+
    "\23\0\2\5\1\0\2\5\3\0\2\5\1\0\1\5"+
    "\10\0\2\5\1\u0112\24\5\23\0\2\5\1\0\2\5"+
    "\3\0\2\5\1\0\1\5\10\0\5\5\1\u0113\21\5"+
    "\23\0\2\5\1\0\2\5\3\0\2\5\1\0\1\5"+
    "\10\0\5\5\1\u0114\21\5\23\0\2\5\1\0\2\5"+
    "\3\0\2\5\1\0\1\5\10\0\12\5\1\u0115\14\5"+
    "\23\0\2\5\1\0\2\5\3\0\2\5\1\0\1\5"+
    "\10\0\17\5\1\u0116\7\5\23\0\2\5\1\0\2\5"+
    "\3\0\2\5\1\0\1\5\10\0\5\5\1\u0117\21\5"+
    "\23\0\2\5\1\0\2\5\3\0\2\5\1\0\1\5"+
    "\10\0\12\5\1\u0118\14\5\23\0\2\5\1\0\2\5"+
    "\3\0\2\5\1\0\1\5\10\0\5\5\1\u0119\21\5"+
    "\23\0\2\5\1\0\2\5\3\0\2\5\1\0\1\5"+
    "\10\0\5\5\1\u011a\21\5\23\0\2\5\1\0\2\5"+
    "\3\0\2\5\1\0\1\5\10\0\13\5\1\u011b\13\5"+
    "\23\0\2\5\1\0\2\5\3\0\2\5\1\0\1\5"+
    "\10\0\5\5\1\u011c\21\5\23\0\2\5\1\0\2\5"+
    "\3\0\2\5\1\0\1\5\10\0\21\5\1\u011d\5\5"+
    "\23\0\2\5\1\0\2\5\3\0\2\5\1\0\1\5"+
    "\10\0\2\5\1\u011e\24\5\23\0\2\5\1\0\2\5"+
    "\3\0\2\5\1\0\1\5\10\0\13\5\1\u011f\13\5"+
    "\23\0\2\5\1\0\2\5\3\0\2\5\1\0\1\5"+
    "\10\0\6\5\1\u0120\20\5\23\0\2\5\1\0\2\5"+
    "\3\0\2\5\1\0\1\5\10\0\11\5\1\u0121\15\5"+
    "\22\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12958];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\4\1\1\11\6\1\2\11\30\1\11\11"+
    "\10\1\1\0\2\1\3\11\2\1\1\11\1\0\45\1"+
    "\3\11\1\1\11\11\6\1\2\0\53\1\3\11\1\1"+
    "\1\11\1\0\1\1\1\11\44\1\2\11\1\0\112\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[289];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  private IElementType myTokenType;
  private int myState;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;



  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1772) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  @Override
  public IElementType getTokenType() {
    if (myTokenType == null) locateToken();
    return myTokenType;
  }

  @Override
  public final int getTokenStart(){
    if (myTokenType == null) locateToken();
    return zzStartRead;
  }

  @Override
  public final int getTokenEnd(){
    if (myTokenType == null) locateToken();
    return getTokenStart() + yylength();
  }

  @Override
  public void advance() {
    if (myTokenType == null) locateToken();
    myTokenType = null;
  }

  @Override
  public int getState() {
    if (myTokenType == null) locateToken();
    return myState;
  }

  @Override
  public void start(final CharSequence buffer, int startOffset, int endOffset, final int initialState) {
    reset(buffer, startOffset, endOffset, initialState);
    myTokenType = null;
  }

   @Override
   public CharSequence getBufferSequence() {
     return zzBuffer;
   }

   @Override
   public int getBufferEnd() {
     return zzEndRead;
   }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
    myTokenType = null;
  }

   private void locateToken() {
     if (myTokenType != null) return;
     try {
       myState = yystate();
       myTokenType = advanceImpl();
     }
     catch (java.io.IOException e) { /*Can't happen*/ }
     catch (Error e) {
       // add lexer class name to the error
       final Error error = new Error(getClass().getName() + ": " + e.getMessage());
       error.setStackTrace(e.getStackTrace());
       throw error;
     }
   }

   /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advanceImpl() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 98: 
          { yybegin(YYINITIAL); return JSTokenTypes.FUNCTION_KEYWORD;
          }
        case 105: break;
        case 29: 
          { yybegin(YYINITIAL); return JSTokenTypes.COLON;
          }
        case 106: break;
        case 4: 
          { return JSTokenTypes.WHITE_SPACE;
          }
        case 107: break;
        case 32: 
          { return JSTokenTypes.REGEXP_LITERAL;
          }
        case 108: break;
        case 84: 
          { yybegin(YYINITIAL); return JSTokenTypes.WHILE_KEYWORD;
          }
        case 109: break;
        case 21: 
          { yybegin(YYINITIAL); return JSTokenTypes.LPAR;
          }
        case 110: break;
        case 68: 
          { yybegin(DIV_OR_GT); return JSTokenTypes.TRUE_KEYWORD;
          }
        case 111: break;
        case 88: 
          { yybegin(YYINITIAL); return JSTokenTypes.STATIC_KEYWORD;
          }
        case 112: break;
        case 45: 
          { yybegin(YYINITIAL); return JSTokenTypes.GE;
          }
        case 113: break;
        case 89: 
          { yybegin(YYINITIAL); return JSTokenTypes.SWITCH_KEYWORD;
          }
        case 114: break;
        case 34: 
          { return JSTokenTypes.C_STYLE_COMMENT;
          }
        case 115: break;
        case 50: 
          { yybegin(YYINITIAL); return JSTokenTypes.OROR;
          }
        case 116: break;
        case 57: 
          { return JSTokenTypes.DOC_COMMENT;
          }
        case 117: break;
        case 59: 
          { yybegin(YYINITIAL); return JSTokenTypes.FOR_KEYWORD;
          }
        case 118: break;
        case 65: 
          { yybegin(YYINITIAL); return JSTokenTypes.GTGTEQ;
          }
        case 119: break;
        case 26: 
          { yybegin(YYINITIAL); return JSTokenTypes.COMMA;
          }
        case 120: break;
        case 13: 
          { yybegin(YYINITIAL); return JSTokenTypes.EQ;
          }
        case 121: break;
        case 38: 
          { yybegin(YYINITIAL); return JSTokenTypes.DO_KEYWORD;
          }
        case 122: break;
        case 48: 
          { yybegin(YYINITIAL); return JSTokenTypes.ANDAND;
          }
        case 123: break;
        case 44: 
          { return JSTokenTypes.PLUSPLUS;
          }
        case 124: break;
        case 10: 
          { yybegin(YYINITIAL); return JSTokenTypes.STRING_LITERAL;
          }
        case 125: break;
        case 3: 
          { yybegin(DIV_OR_GT);       return JSTokenTypes.IDENTIFIER;
          }
        case 126: break;
        case 5: 
          { return JSTokenTypes.DIV;
          }
        case 127: break;
        case 25: 
          { yybegin(YYINITIAL); return JSTokenTypes.SEMICOLON;
          }
        case 128: break;
        case 51: 
          { yybegin(YYINITIAL); return JSTokenTypes.XOREQ;
          }
        case 129: break;
        case 85: 
          { yybegin(YYINITIAL); return JSTokenTypes.TYPEOF_KEYWORD;
          }
        case 130: break;
        case 70: 
          { yybegin(YYINITIAL); return JSTokenTypes.ELSE_KEYWORD;
          }
        case 131: break;
        case 67: 
          { yybegin(YYINITIAL); return JSTokenTypes.LTLTEQ;
          }
        case 132: break;
        case 58: 
          { yybegin(YYINITIAL); return JSTokenTypes.TRY_KEYWORD;
          }
        case 133: break;
        case 6: 
          { yybegin(YYINITIAL); return JSTokenTypes.MULT;
          }
        case 134: break;
        case 54: 
          { yybegin(YYINITIAL); return JSTokenTypes.MULTEQ;
          }
        case 135: break;
        case 17: 
          { yybegin(YYINITIAL); return JSTokenTypes.AND;
          }
        case 136: break;
        case 63: 
          { yybegin(YYINITIAL); return JSTokenTypes.EQEQEQ;
          }
        case 137: break;
        case 69: 
          { yybegin(DIV_OR_GT); return JSTokenTypes.THIS_KEYWORD;
          }
        case 138: break;
        case 36: 
          { yybegin(YYINITIAL); return JSTokenTypes.MINUSEQ;
          }
        case 139: break;
        case 37: 
          { yybegin(YYINITIAL); return JSTokenTypes.INTERPOLATION_STRING_LITERAL;
          }
        case 140: break;
        case 53: 
          { yybegin(YYINITIAL); return JSTokenTypes.DIVEQ;
          }
        case 141: break;
        case 62: 
          { yybegin(YYINITIAL); return JSTokenTypes.VAR_KEYWORD;
          }
        case 142: break;
        case 9: 
          { yybegin(YYINITIAL); return JSTokenTypes.SINGLE_QUOTE_STRING_LITERAL;
          }
        case 143: break;
        case 102: 
          { yybegin(YYINITIAL); return JSTokenTypes.PROTECTED_KEYWORD;
          }
        case 144: break;
        case 15: 
          { yybegin(YYINITIAL); return JSTokenTypes.PLUS;
          }
        case 145: break;
        case 33: 
          { return JSTokenTypes.END_OF_LINE_COMMENT;
          }
        case 146: break;
        case 72: 
          { yybegin(DIV_OR_GT); return JSTokenTypes.NULL_KEYWORD;
          }
        case 147: break;
        case 80: 
          { yybegin(YYINITIAL); return JSTokenTypes.CATCH_KEYWORD;
          }
        case 148: break;
        case 41: 
          { yybegin(YYINITIAL); return JSTokenTypes.EQEQ;
          }
        case 149: break;
        case 1: 
          { return JSTokenTypes.BAD_CHARACTER;
          }
        case 150: break;
        case 94: 
          { yybegin(YYINITIAL); return JSTokenTypes.FINALLY_KEYWORD;
          }
        case 151: break;
        case 90: 
          { yybegin(YYINITIAL); return JSTokenTypes.DELETE_KEYWORD;
          }
        case 152: break;
        case 77: 
          { yybegin(YYINITIAL); return JSTokenTypes.THROW_KEYWORD;
          }
        case 153: break;
        case 82: 
          { yybegin(YYINITIAL); return JSTokenTypes.CONST_KEYWORD;
          }
        case 154: break;
        case 47: 
          { yybegin(YYINITIAL); return JSTokenTypes.ANDEQ;
          }
        case 155: break;
        case 104: 
          { yybegin(YYINITIAL); return JSTokenTypes.IMPLEMENTS_KEYWORD;
          }
        case 156: break;
        case 56: 
          { yybegin(YYINITIAL); return JSTokenTypes.LTLT;
          }
        case 157: break;
        case 31: 
          { yybegin(YYINITIAL); return JSTokenTypes.LT;
          }
        case 158: break;
        case 75: 
          { yybegin(YYINITIAL); return JSTokenTypes.VOID_KEYWORD;
          }
        case 159: break;
        case 14: 
          { yybegin(YYINITIAL); return JSTokenTypes.EXCL;
          }
        case 160: break;
        case 39: 
          { yybegin(YYINITIAL); return JSTokenTypes.IF_KEYWORD;
          }
        case 161: break;
        case 97: 
          { yybegin(YYINITIAL); return JSTokenTypes.PACKAGE_KEYWORD;
          }
        case 162: break;
        case 64: 
          { yybegin(YYINITIAL); return JSTokenTypes.NEQEQ;
          }
        case 163: break;
        case 81: 
          { yybegin(YYINITIAL); return JSTokenTypes.CLASS_KEYWORD;
          }
        case 164: break;
        case 43: 
          { yybegin(YYINITIAL); return JSTokenTypes.PLUSEQ;
          }
        case 165: break;
        case 49: 
          { yybegin(YYINITIAL); return JSTokenTypes.OREQ;
          }
        case 166: break;
        case 99: 
          { yybegin(YYINITIAL); return JSTokenTypes.CONTINUE_KEYWORD;
          }
        case 167: break;
        case 66: 
          { yybegin(YYINITIAL); return JSTokenTypes.GTGTGT;
          }
        case 168: break;
        case 46: 
          { yybegin(YYINITIAL); return JSTokenTypes.GTGT;
          }
        case 169: break;
        case 101: 
          { yybegin(YYINITIAL); return JSTokenTypes.INTERFACE_KEYWORD;
          }
        case 170: break;
        case 27: 
          { yybegin(YYINITIAL); return JSTokenTypes.TILDE;
          }
        case 171: break;
        case 95: 
          { yybegin(YYINITIAL); return JSTokenTypes.DEFAULT_KEYWORD;
          }
        case 172: break;
        case 60: 
          { yybegin(YYINITIAL); return JSTokenTypes.LET_KEYWORD;
          }
        case 173: break;
        case 2: 
          { yybegin(DIV_OR_GT); return JSTokenTypes.NUMERIC_LITERAL;
          }
        case 174: break;
        case 19: 
          { yybegin(YYINITIAL); return JSTokenTypes.XOR;
          }
        case 175: break;
        case 30: 
          { yybegin(YYINITIAL); return JSTokenTypes.DIV;
          }
        case 176: break;
        case 16: 
          { yybegin(YYINITIAL); return JSTokenTypes.GT;
          }
        case 177: break;
        case 40: 
          { yybegin(YYINITIAL); return JSTokenTypes.IN_KEYWORD;
          }
        case 178: break;
        case 86: 
          { yybegin(YYINITIAL); return JSTokenTypes.RETURN_KEYWORD;
          }
        case 179: break;
        case 83: 
          { yybegin(YYINITIAL); return JSTokenTypes.YIELD_KEYWORD;
          }
        case 180: break;
        case 61: 
          { yybegin(YYINITIAL); return JSTokenTypes.NEW_KEYWORD;
          }
        case 181: break;
        case 78: 
          { yybegin(DIV_OR_GT); return JSTokenTypes.FALSE_KEYWORD;
          }
        case 182: break;
        case 18: 
          { yybegin(YYINITIAL); return JSTokenTypes.OR;
          }
        case 183: break;
        case 52: 
          { yybegin(YYINITIAL); return JSTokenTypes.PERCEQ;
          }
        case 184: break;
        case 87: 
          { yybegin(YYINITIAL); return JSTokenTypes.EXPORT_KEYWORD;
          }
        case 185: break;
        case 8: 
          { yybegin(YYINITIAL); return JSTokenTypes.MINUS;
          }
        case 186: break;
        case 35: 
          { return JSTokenTypes.MINUSMINUS;
          }
        case 187: break;
        case 71: 
          { yybegin(YYINITIAL); return JSTokenTypes.ENUM_KEYWORD;
          }
        case 188: break;
        case 91: 
          { yybegin(YYINITIAL); return JSTokenTypes.IMPORT_KEYWORD;
          }
        case 189: break;
        case 28: 
          { yybegin(YYINITIAL); return JSTokenTypes.QUEST;
          }
        case 190: break;
        case 79: 
          { yybegin(YYINITIAL); return JSTokenTypes.BREAK_KEYWORD;
          }
        case 191: break;
        case 7: 
          { yybegin(YYINITIAL); return JSTokenTypes.DOT;
          }
        case 192: break;
        case 73: 
          { yybegin(YYINITIAL); return JSTokenTypes.CASE_KEYWORD;
          }
        case 193: break;
        case 12: 
          { yybegin(DIV_OR_GT);       return JSTokenTypes.RBRACKET;
          }
        case 194: break;
        case 24: 
          { yybegin(YYINITIAL); return JSTokenTypes.RBRACE;
          }
        case 195: break;
        case 103: 
          { yybegin(YYINITIAL); return JSTokenTypes.INSTANCEOF_KEYWORD;
          }
        case 196: break;
        case 42: 
          { yybegin(YYINITIAL); return JSTokenTypes.NE;
          }
        case 197: break;
        case 23: 
          { yybegin(YYINITIAL); return JSTokenTypes.LBRACE;
          }
        case 198: break;
        case 96: 
          { yybegin(YYINITIAL); return JSTokenTypes.PRIVATE_KEYWORD;
          }
        case 199: break;
        case 92: 
          { yybegin(YYINITIAL); return JSTokenTypes.PUBLIC_KEYWORD;
          }
        case 200: break;
        case 22: 
          { yybegin(DIV_OR_GT);       return JSTokenTypes.RPAR;
          }
        case 201: break;
        case 93: 
          { yybegin(YYINITIAL); return JSTokenTypes.EXTENDS_KEYWORD;
          }
        case 202: break;
        case 20: 
          { yybegin(YYINITIAL); return JSTokenTypes.PERC;
          }
        case 203: break;
        case 74: 
          { yybegin(YYINITIAL); return JSTokenTypes.WITH_KEYWORD;
          }
        case 204: break;
        case 55: 
          { yybegin(YYINITIAL); return JSTokenTypes.LE;
          }
        case 205: break;
        case 11: 
          { yybegin(YYINITIAL); return JSTokenTypes.LBRACKET;
          }
        case 206: break;
        case 76: 
          { yybegin(YYINITIAL); return JSTokenTypes.GTGTGTEQ;
          }
        case 207: break;
        case 100: 
          { yybegin(DIV_OR_GT); return JSTokenTypes.UNDEFINED_KEYWORD;
          }
        case 208: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
