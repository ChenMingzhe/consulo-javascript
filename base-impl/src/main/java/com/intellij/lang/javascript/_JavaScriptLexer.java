/*
 * Copyright 2000-2005 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* The following code was generated by JFlex 1.4.1 on 10.07.09 18:12 */

package com.intellij.lang.javascript;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 10.07.09 18:12 from the specification file
 * <tt>C:/Branches/Diana81/tools/lexer/../../plugins/JavaScriptLanguage/src/com/intellij/lang/javascript/JavaScript.flex</tt>
 */
class _JavaScriptLexer implements FlexLexer
{
	/**
	 * initial size of the lookahead buffer
	 */
	private static final int ZZ_BUFFERSIZE = 16384;

	/**
	 * lexical states
	 */
	public static final int TAG_ATTR_SQ = 8;
	public static final int GENERIC_SIGNATURE = 2;
	public static final int DIV_OR_GT = 1;
	public static final int TAG_ATTR_DQ = 9;
	public static final int TAG_CONTENT = 6;
	public static final int TAG_END = 7;
	public static final int GWT_FIELD_OR_METHOD = 11;
	public static final int TAG = 4;
	public static final int YYINITIAL = 0;
	public static final int LAST_STATE = 12;
	public static final int TAG_ATTRIBUTES = 5;
	public static final int COMMENT = 10;
	public static final int MAY_BE_GENERIC_SIGNATURE = 3;

	/**
	 * Translates characters to character classes
	 */
	private static final String ZZ_CMAP_PACKED = "\11\5\1\3\1\16\1\0\1\3\1\10\16\5\4\0\1\36\1\32" +
			"\1\21\1\41\1\46\1\77\1\43\1\17\1\34\1\35\1\7\1\15" +
			"\1\100\1\27\1\13\1\6\1\11\7\1\2\1\1\30\1\44\1\31" +
			"\1\45\1\33\1\42\1\74\1\104\1\2\1\102\1\103\1\14\1\2" +
			"\15\26\1\105\3\26\1\12\2\26\1\22\1\20\1\23\1\76\1\26" +
			"\1\0\1\54\1\62\1\64\1\60\1\52\1\53\1\24\1\65\1\61" +
			"\1\26\1\63\1\55\1\73\1\57\1\66\1\71\1\26\1\50\1\56" +
			"\1\47\1\51\1\72\1\70\1\25\1\67\1\26\1\37\1\75\1\40" +
			"\1\101\41\5\2\0\4\4\4\0\1\26\2\0\1\5\7\0\1\26" +
			"\4\0\1\26\5\0\27\26\1\0\37\26\1\0\u013f\26\31\0\162\26" +
			"\4\0\14\26\16\0\5\26\11\0\1\26\21\0\130\5\5\0\23\5" +
			"\12\0\1\26\13\0\1\26\1\0\3\26\1\0\1\26\1\0\24\26" +
			"\1\0\54\26\1\0\46\26\1\0\5\26\4\0\202\26\1\0\4\5" +
			"\3\0\105\26\1\0\46\26\2\0\2\26\6\0\20\26\41\0\46\26" +
			"\2\0\1\26\7\0\47\26\11\0\21\5\1\0\27\5\1\0\3\5" +
			"\1\0\1\5\1\0\2\5\1\0\1\5\13\0\33\26\5\0\3\26" +
			"\15\0\4\5\14\0\6\5\13\0\32\26\5\0\13\26\16\5\7\0" +
			"\12\5\4\0\2\26\1\5\143\26\1\0\1\26\10\5\1\0\6\5" +
			"\2\26\2\5\1\0\4\5\2\26\12\5\3\26\2\0\1\26\17\0" +
			"\1\5\1\26\1\5\36\26\33\5\2\0\3\26\60\0\46\26\13\5" +
			"\1\26\u014f\0\3\5\66\26\2\0\1\5\1\26\20\5\2\0\1\26" +
			"\4\5\3\0\12\26\2\5\2\0\12\5\21\0\3\5\1\0\10\26" +
			"\2\0\2\26\2\0\26\26\1\0\7\26\1\0\1\26\3\0\4\26" +
			"\2\0\1\5\1\26\7\5\2\0\2\5\2\0\3\5\11\0\1\5" +
			"\4\0\2\26\1\0\3\26\2\5\2\0\12\5\2\26\2\4\15\0" +
			"\3\5\1\0\6\26\4\0\2\26\2\0\26\26\1\0\7\26\1\0" +
			"\2\26\1\0\2\26\1\0\2\26\2\0\1\5\1\0\5\5\4\0" +
			"\2\5\2\0\3\5\13\0\4\26\1\0\1\26\7\0\14\5\3\26" +
			"\14\0\3\5\1\0\11\26\1\0\3\26\1\0\26\26\1\0\7\26" +
			"\1\0\2\26\1\0\5\26\2\0\1\5\1\26\10\5\1\0\3\5" +
			"\1\0\3\5\2\0\1\26\17\0\2\26\2\5\2\0\12\5\1\0" +
			"\1\4\17\0\3\5\1\0\10\26\2\0\2\26\2\0\26\26\1\0" +
			"\7\26\1\0\2\26\1\0\5\26\2\0\1\5\1\26\6\5\3\0" +
			"\2\5\2\0\3\5\10\0\2\5\4\0\2\26\1\0\3\26\4\0" +
			"\12\5\1\0\1\26\20\0\1\5\1\26\1\0\6\26\3\0\3\26" +
			"\1\0\4\26\3\0\2\26\1\0\1\26\1\0\2\26\3\0\2\26" +
			"\3\0\3\26\3\0\10\26\1\0\3\26\4\0\5\5\3\0\3\5" +
			"\1\0\4\5\11\0\1\5\17\0\11\5\11\0\1\4\7\0\3\5" +
			"\1\0\10\26\1\0\3\26\1\0\27\26\1\0\12\26\1\0\5\26" +
			"\4\0\7\5\1\0\3\5\1\0\4\5\7\0\2\5\11\0\2\26" +
			"\4\0\12\5\22\0\2\5\1\0\10\26\1\0\3\26\1\0\27\26" +
			"\1\0\12\26\1\0\5\26\2\0\1\5\1\26\7\5\1\0\3\5" +
			"\1\0\4\5\7\0\2\5\7\0\1\26\1\0\2\26\4\0\12\5" +
			"\22\0\2\5\1\0\10\26\1\0\3\26\1\0\27\26\1\0\20\26" +
			"\4\0\6\5\2\0\3\5\1\0\4\5\11\0\1\5\10\0\2\26" +
			"\4\0\12\5\22\0\2\5\1\0\22\26\3\0\30\26\1\0\11\26" +
			"\1\0\1\26\2\0\7\26\3\0\1\5\4\0\6\5\1\0\1\5" +
			"\1\0\10\5\22\0\2\5\15\0\60\26\1\5\2\26\7\5\4\0" +
			"\1\4\7\26\10\5\1\0\12\5\47\0\2\26\1\0\1\26\2\0" +
			"\2\26\1\0\1\26\2\0\1\26\6\0\4\26\1\0\7\26\1\0" +
			"\3\26\1\0\1\26\1\0\1\26\2\0\2\26\1\0\4\26\1\5" +
			"\2\26\6\5\1\0\2\5\1\26\2\0\5\26\1\0\1\26\1\0" +
			"\6\5\2\0\12\5\2\0\2\26\42\0\1\26\27\0\2\5\6\0" +
			"\12\5\13\0\1\5\1\0\1\5\1\0\1\5\4\0\2\5\10\26" +
			"\1\0\42\26\6\0\24\5\1\0\2\5\4\26\4\0\10\5\1\0" +
			"\44\5\11\0\1\5\71\0\42\26\1\0\5\26\1\0\2\26\1\0" +
			"\7\5\3\0\4\5\6\0\12\5\6\0\6\26\4\5\106\0\46\26" +
			"\12\0\51\26\7\0\132\26\5\0\104\26\5\0\122\26\6\0\7\26" +
			"\1\0\77\26\1\0\1\26\1\0\4\26\2\0\7\26\1\0\1\26" +
			"\1\0\4\26\2\0\47\26\1\0\1\26\1\0\4\26\2\0\37\26" +
			"\1\0\1\26\1\0\4\26\2\0\7\26\1\0\1\26\1\0\4\26" +
			"\2\0\7\26\1\0\7\26\1\0\27\26\1\0\37\26\1\0\1\26" +
			"\1\0\4\26\2\0\7\26\1\0\47\26\1\0\23\26\16\0\11\5" +
			"\56\0\125\26\14\0\u026c\26\2\0\10\26\12\0\32\26\5\0\113\26" +
			"\3\0\3\4\17\0\15\26\1\0\4\26\3\5\13\0\22\26\3\5" +
			"\13\0\22\26\2\5\14\0\15\26\1\0\3\26\1\0\2\5\14\0" +
			"\64\26\40\5\3\0\1\26\3\0\1\4\1\26\1\5\2\0\12\5" +
			"\41\0\3\5\2\0\12\5\6\0\130\26\10\0\51\26\1\5\126\0" +
			"\35\26\3\0\14\5\4\0\14\5\12\0\12\5\36\26\2\0\5\26" +
			"\u038b\0\154\26\224\0\234\26\4\0\132\26\6\0\26\26\2\0\6\26" +
			"\2\0\46\26\2\0\6\26\2\0\10\26\1\0\1\26\1\0\1\26" +
			"\1\0\1\26\1\0\37\26\2\0\65\26\1\0\7\26\1\0\1\26" +
			"\3\0\3\26\1\0\7\26\3\0\4\26\2\0\6\26\4\0\15\26" +
			"\5\0\3\26\1\0\7\26\17\0\4\5\32\0\5\5\20\0\2\4" +
			"\23\0\1\4\13\0\4\5\6\0\6\5\1\0\1\26\15\0\1\26" +
			"\40\0\22\4\36\0\15\5\4\0\1\5\3\0\6\5\27\0\1\26" +
			"\4\0\1\26\2\0\12\26\1\0\1\26\3\0\5\26\6\0\1\26" +
			"\1\0\1\26\1\0\1\26\1\0\4\26\1\0\3\26\1\0\7\26" +
			"\3\0\3\26\5\0\5\26\26\0\44\4\u0e81\0\2\26\1\4\31\0" +
			"\11\4\6\5\1\0\5\26\2\0\3\4\2\26\4\0\126\26\2\0" +
			"\2\5\2\0\3\26\1\0\132\26\1\4\4\26\5\0\50\26\4\0" +
			"\136\26\21\0\30\26\70\0\20\26\u0200\0\u19b6\26\112\0\u51a6\26\132\0" +
			"\u048d\26\u0773\0\u2ba4\26\u215c\0\u012e\26\2\0\73\26\225\0\7\26\14\0" +
			"\5\26\5\0\1\26\1\5\12\26\1\0\15\26\1\0\5\26\1\0" +
			"\1\26\1\0\2\26\1\0\2\26\1\0\154\26\41\0\u016b\26\22\0" +
			"\100\26\2\0\66\26\50\0\14\26\1\4\3\0\20\5\20\0\4\5" +
			"\17\0\2\4\30\0\3\4\31\0\1\4\6\0\5\26\1\0\207\26" +
			"\2\0\1\5\4\0\1\4\13\0\12\5\7\0\32\26\4\0\1\4" +
			"\1\0\32\26\12\0\1\4\131\26\3\0\6\26\2\0\6\26\2\0" +
			"\6\26\2\0\3\26\3\0\2\4\3\0\2\4\22\0\3\5\4\0";

	/**
	 * Translates characters to character classes
	 */
	private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

	/**
	 * Translates DFA states to action switch labels.
	 */
	private static final int[] ZZ_ACTION = zzUnpackAction();

	private static final String ZZ_ACTION_PACKED_0 = "\6\0\1\1\1\0\2\2\3\0\1\3\1\4\1\5" +
			"\1\6\1\3\1\7\1\4\1\10\1\11\1\12\1\3" +
			"\1\13\1\14\1\15\1\5\1\16\1\17\1\20\1\21" +
			"\1\22\1\23\1\24\1\25\1\26\1\3\1\27\1\30" +
			"\1\31\1\32\23\5\1\33\1\34\1\35\1\36\1\37" +
			"\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47" +
			"\1\50\1\44\2\45\1\51\1\52\1\51\1\53\1\54" +
			"\1\53\1\55\2\53\1\56\1\57\1\60\1\61\1\62" +
			"\1\63\2\56\1\64\1\1\1\55\2\53\1\65\1\66" +
			"\1\2\1\67\3\2\3\70\1\71\1\72\2\71\1\3" +
			"\2\4\1\73\1\74\1\75\1\0\1\73\1\4\1\76" +
			"\1\77\1\100\2\12\1\0\2\13\1\0\1\5\1\101" +
			"\1\102\1\103\1\0\1\104\1\105\1\106\3\0\1\107" +
			"\1\110\2\0\1\111\1\0\16\5\1\112\11\5\1\113" +
			"\1\5\1\114\1\115\1\116\17\5\1\117\1\120\1\121" +
			"\1\122\1\123\1\124\1\125\1\0\1\126\2\45\1\54" +
			"\1\127\1\0\1\130\1\0\1\131\1\57\1\0\1\132" +
			"\1\133\3\0\1\65\4\2\1\0\1\72\1\134\1\4" +
			"\1\73\1\75\1\135\1\73\2\0\1\136\2\12\2\13" +
			"\1\137\1\140\2\0\1\141\1\142\1\143\6\0\1\144" +
			"\1\145\1\5\1\146\4\5\1\147\10\5\1\150\1\151" +
			"\2\5\1\152\2\5\1\153\5\5\1\154\20\5\1\155" +
			"\2\5\1\156\1\45\1\157\1\160\3\0\1\161\1\2" +
			"\1\161\3\2\1\161\2\2\1\0\1\72\1\0\2\135" +
			"\2\0\1\162\1\0\1\22\2\0\1\43\1\163\1\5" +
			"\1\164\3\5\1\165\1\5\1\166\1\167\6\5\1\170" +
			"\14\5\1\171\5\5\1\172\6\5\1\173\1\174\1\0" +
			"\1\1\2\2\1\175\1\75\7\0\1\30\1\0\1\176" +
			"\5\5\1\177\1\200\1\5\1\201\13\5\1\202\1\203" +
			"\1\204\1\5\1\205\1\5\1\206\1\207\5\5\14\0" +
			"\1\210\1\211\4\5\1\212\1\213\1\214\2\5\1\215" +
			"\6\5\1\216\4\5\1\217\2\5\4\0\1\220\4\0" +
			"\1\5\1\221\1\5\1\222\1\5\1\223\1\224\3\5" +
			"\1\225\3\5\1\226\1\5\1\227\1\230\1\231\2\0" +
			"\1\232\1\105\1\0\1\5\1\233\2\5\1\234\2\5" +
			"\1\235\1\236\1\5\1\237\1\240\2\0\1\241\1\242" +
			"\1\243\2\5\1\244\1\0\1\245\1\246\1\0";

	private static int[] zzUnpackAction()
	{
		int[] result = new int[517];
		int offset = 0;
		offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAction(String packed, int offset, int[] result)
	{
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while(i < l)
		{
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do
			{
				result[j++] = value;
			}
			while(--count > 0);
		}
		return j;
	}


	/**
	 * Translates a state to a row index in the transition table
	 */
	private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

	private static final String ZZ_ROWMAP_PACKED_0 = "\0\0\0\106\0\214\0\322\0\u0118\0\u015e\0\u01a4\0\u01ea" +
			"\0\u0230\0\u0276\0\u02bc\0\u0302\0\u0348\0\u038e\0\u03d4\0\u041a" +
			"\0\u0460\0\u04a6\0\u038e\0\u04ec\0\u0532\0\u0578\0\u05be\0\u0604" +
			"\0\u064a\0\u038e\0\u0690\0\u06d6\0\u071c\0\u0762\0\u07a8\0\u07ee" +
			"\0\u0834\0\u038e\0\u038e\0\u038e\0\u038e\0\u087a\0\u038e\0\u08c0" +
			"\0\u038e\0\u0906\0\u094c\0\u0992\0\u09d8\0\u0a1e\0\u0a64\0\u0aaa" +
			"\0\u0af0\0\u0b36\0\u0b7c\0\u0bc2\0\u0c08\0\u0c4e\0\u0c94\0\u0cda" +
			"\0\u0d20\0\u0d66\0\u0dac\0\u0df2\0\u0e38\0\u038e\0\u0e7e\0\u0ec4" +
			"\0\u0f0a\0\u038e\0\u038e\0\u0f50\0\u0f96\0\u0fdc\0\u038e\0\u1022" +
			"\0\u038e\0\u038e\0\u038e\0\u1068\0\u10ae\0\u10f4\0\u038e\0\u038e" +
			"\0\u1068\0\u038e\0\u113a\0\u1180\0\u11c6\0\u120c\0\u1068\0\u038e" +
			"\0\u1252\0\u1298\0\u038e\0\u038e\0\u038e\0\u12de\0\u1068\0\u038e" +
			"\0\u1324\0\u136a\0\u12de\0\u13b0\0\u13f6\0\u038e\0\u143c\0\u038e" +
			"\0\u1482\0\u14c8\0\u150e\0\u038e\0\u1554\0\u1068\0\u038e\0\u159a" +
			"\0\u15e0\0\u1068\0\u1068\0\u1626\0\u166c\0\u16b2\0\u16f8\0\u173e" +
			"\0\u1784\0\u17ca\0\u1810\0\u1856\0\u038e\0\u038e\0\u038e\0\u189c" +
			"\0\u18e2\0\u1928\0\u038e\0\u196e\0\u19b4\0\u038e\0\u038e\0\u038e" +
			"\0\u19fa\0\u1a40\0\u1a86\0\u038e\0\u1acc\0\u1b12\0\u1b58\0\u038e" +
			"\0\u038e\0\u1b9e\0\u1be4\0\u1c2a\0\u1c70\0\u1cb6\0\u1cfc\0\u1d42" +
			"\0\u1d88\0\u1dce\0\u1e14\0\u1e5a\0\u1ea0\0\u1ee6\0\u1f2c\0\u1f72" +
			"\0\u1fb8\0\u1ffe\0\u2044\0\u041a\0\u208a\0\u20d0\0\u2116\0\u215c" +
			"\0\u21a2\0\u21e8\0\u222e\0\u2274\0\u22ba\0\u041a\0\u2300\0\u041a" +
			"\0\u041a\0\u2346\0\u238c\0\u23d2\0\u2418\0\u245e\0\u24a4\0\u24ea" +
			"\0\u2530\0\u2576\0\u25bc\0\u2602\0\u2648\0\u268e\0\u26d4\0\u271a" +
			"\0\u2760\0\u038e\0\u038e\0\u038e\0\u038e\0\u038e\0\u038e\0\u27a6" +
			"\0\u27ec\0\u038e\0\u2832\0\u2878\0\u28be\0\u038e\0\u2904\0\u038e" +
			"\0\u120c\0\u038e\0\u294a\0\u12de\0\u038e\0\u038e\0\u2990\0\u29d6" +
			"\0\u2a1c\0\u2a62\0\u2aa8\0\u2aee\0\u2b34\0\u2b7a\0\u2bc0\0\u2c06" +
			"\0\u038e\0\u2c4c\0\u2c92\0\u2cd8\0\u2d1e\0\u2d64\0\u2daa\0\u2df0" +
			"\0\u038e\0\u2e36\0\u2e7c\0\u2ec2\0\u2f08\0\u038e\0\u041a\0\u2f4e" +
			"\0\u2f94\0\u038e\0\u2fda\0\u038e\0\u3020\0\u3066\0\u30ac\0\u30f2" +
			"\0\u3138\0\u317e\0\u038e\0\u038e\0\u31c4\0\u041a\0\u320a\0\u3250" +
			"\0\u3296\0\u32dc\0\u041a\0\u3322\0\u3368\0\u33ae\0\u33f4\0\u343a" +
			"\0\u3480\0\u34c6\0\u350c\0\u041a\0\u041a\0\u3552\0\u3598\0\u041a" +
			"\0\u35de\0\u3624\0\u041a\0\u366a\0\u36b0\0\u36f6\0\u373c\0\u3782" +
			"\0\u37c8\0\u380e\0\u3854\0\u389a\0\u38e0\0\u3926\0\u396c\0\u39b2" +
			"\0\u39f8\0\u3a3e\0\u3a84\0\u3aca\0\u3b10\0\u3b56\0\u3b9c\0\u3be2" +
			"\0\u3c28\0\u041a\0\u3c6e\0\u3cb4\0\u038e\0\u3cfa\0\u1022\0\u038e" +
			"\0\u3d40\0\u3d86\0\u3dcc\0\u038e\0\u3e12\0\u143c\0\u3e58\0\u3e9e" +
			"\0\u3ee4\0\u14c8\0\u3f2a\0\u3f70\0\u3fb6\0\u038e\0\u3ffc\0\u4042" +
			"\0\u038e\0\u4088\0\u40ce\0\u038e\0\u4114\0\u415a\0\u41a0\0\u41e6" +
			"\0\u422c\0\u041a\0\u4272\0\u041a\0\u42b8\0\u42fe\0\u4344\0\u041a" +
			"\0\u438a\0\u041a\0\u041a\0\u43d0\0\u4416\0\u445c\0\u44a2\0\u44e8" +
			"\0\u452e\0\u041a\0\u4574\0\u45ba\0\u4600\0\u4646\0\u468c\0\u46d2" +
			"\0\u4718\0\u475e\0\u47a4\0\u47ea\0\u4830\0\u4876\0\u041a\0\u48bc" +
			"\0\u4902\0\u4948\0\u498e\0\u49d4\0\u041a\0\u4a1a\0\u4a60\0\u4aa6" +
			"\0\u4aec\0\u4b32\0\u4b78\0\u041a\0\u1022\0\u4bbe\0\u038e\0\u4c04" +
			"\0\u4c4a\0\u038e\0\u038e\0\u4c90\0\u4cd6\0\u4d1c\0\u4d62\0\u4da8" +
			"\0\u4dee\0\u4e34\0\u4e7a\0\u4ec0\0\u041a\0\u4f06\0\u4f4c\0\u4f92" +
			"\0\u4fd8\0\u501e\0\u041a\0\u5064\0\u50aa\0\u041a\0\u50f0\0\u5136" +
			"\0\u517c\0\u51c2\0\u5208\0\u524e\0\u5294\0\u52da\0\u5320\0\u5366" +
			"\0\u53ac\0\u041a\0\u041a\0\u041a\0\u53f2\0\u041a\0\u5438\0\u041a" +
			"\0\u041a\0\u547e\0\u54c4\0\u550a\0\u5550\0\u5596\0\u55dc\0\u5622" +
			"\0\u5668\0\u56ae\0\u56f4\0\u573a\0\u5780\0\u57c6\0\u580c\0\u5852" +
			"\0\u5898\0\u58de\0\u041a\0\u041a\0\u5924\0\u596a\0\u59b0\0\u59f6" +
			"\0\u041a\0\u041a\0\u041a\0\u5a3c\0\u5a82\0\u041a\0\u5ac8\0\u5b0e" +
			"\0\u5b54\0\u5b9a\0\u5be0\0\u5c26\0\u041a\0\u5c6c\0\u5cb2\0\u5cf8" +
			"\0\u5d3e\0\u041a\0\u5d84\0\u5dca\0\u5e10\0\u5e56\0\u5e9c\0\u5ee2" +
			"\0\u573a\0\u5f28\0\u5f6e\0\u5fb4\0\u5ffa\0\u6040\0\u041a\0\u6086" +
			"\0\u041a\0\u60cc\0\u041a\0\u041a\0\u6112\0\u6158\0\u619e\0\u041a" +
			"\0\u61e4\0\u622a\0\u6270\0\u041a\0\u62b6\0\u041a\0\u041a\0\u038e" +
			"\0\u62fc\0\u6342\0\u038e\0\u6388\0\u63ce\0\u6414\0\u041a\0\u645a" +
			"\0\u64a0\0\u041a\0\u64e6\0\u652c\0\u041a\0\u041a\0\u6572\0\u038e" +
			"\0\u573a\0\u65b8\0\u65fe\0\u041a\0\u041a\0\u041a\0\u6644\0\u668a" +
			"\0\u041a\0\u66d0\0\u041a\0\u041a\0\u6716";

	private static int[] zzUnpackRowMap()
	{
		int[] result = new int[517];
		int offset = 0;
		offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackRowMap(String packed, int offset, int[] result)
	{
		int i = 0;  /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while(i < l)
		{
			int high = packed.charAt(i++) << 16;
			result[j++] = high | packed.charAt(i++);
		}
		return j;
	}

	/**
	 * The transition table of the DFA
	 */
	private static final int[] ZZ_TRANS = zzUnpackTrans();

	private static final String ZZ_TRANS_PACKED_0 = "\1\16\1\17\1\20\1\21\1\20\1\16\1\22\1\23" +
			"\1\21\1\24\1\20\1\25\1\20\1\26\1\21\1\27" +
			"\1\30\1\31\1\32\1\33\1\34\2\20\1\35\1\36" +
			"\1\37\1\40\1\41\1\42\1\43\1\21\1\44\1\45" +
			"\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55" +
			"\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65" +
			"\1\66\1\67\1\20\1\70\1\20\1\71\1\72\1\73" +
			"\1\74\1\75\1\20\1\76\1\77\1\100\1\101\1\102" +
			"\1\103\4\20\1\16\1\17\1\20\1\21\1\20\1\16" +
			"\1\104\1\105\1\21\1\24\1\20\1\25\1\20\1\26" +
			"\1\21\1\27\1\30\1\31\1\32\1\33\1\34\2\20" +
			"\1\35\1\36\1\106\1\40\1\41\1\42\1\43\1\21" +
			"\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53" +
			"\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63" +
			"\1\64\1\65\1\66\1\67\1\20\1\70\1\20\1\71" +
			"\1\72\1\73\1\74\1\75\1\20\1\76\1\77\1\100" +
			"\1\101\1\102\1\103\4\20\2\107\1\110\1\21\1\110" +
			"\3\107\1\21\1\107\1\110\1\111\1\110\1\107\1\21" +
			"\5\107\3\110\2\107\1\112\1\107\1\113\2\107\1\21" +
			"\4\107\1\114\2\107\3\110\1\115\7\110\1\116\12\110" +
			"\6\107\4\110\3\117\1\21\4\117\1\21\5\117\1\21" +
			"\12\117\1\120\4\117\1\21\4\117\1\121\42\117\2\122" +
			"\1\123\1\21\2\122\1\124\1\122\1\21\1\122\1\123" +
			"\1\122\1\123\1\122\1\21\5\122\3\123\2\122\1\125" +
			"\4\122\1\21\1\126\3\122\1\127\3\122\25\123\6\122" +
			"\4\123\2\130\1\131\1\132\4\130\1\132\1\130\1\131" +
			"\1\130\1\131\1\130\1\132\1\133\1\130\1\134\2\130" +
			"\3\131\4\130\1\135\2\130\1\132\1\136\3\130\1\137" +
			"\1\130\1\140\1\130\25\131\6\130\4\131\3\141\1\21" +
			"\4\141\1\21\5\141\1\21\12\141\1\142\4\141\1\21" +
			"\1\143\1\141\2\122\1\144\42\141\2\122\1\145\1\21" +
			"\4\122\1\21\1\122\1\145\1\122\1\145\1\122\1\21" +
			"\5\122\3\145\4\122\1\146\2\122\1\21\1\143\3\122" +
			"\1\127\3\122\25\145\6\122\4\145\17\147\1\150\23\147" +
			"\1\151\42\147\21\152\1\150\21\152\1\153\42\152\3\154" +
			"\1\21\4\154\1\21\5\154\1\21\12\154\1\155\4\154" +
			"\1\21\4\154\1\156\42\154\2\157\1\160\1\157\1\160" +
			"\5\157\1\160\1\157\1\160\7\157\3\160\1\157\1\161" +
			"\12\157\1\162\2\157\26\160\6\157\4\160\16\16\1\0" +
			"\24\16\1\163\42\16\107\0\1\17\7\0\1\17\1\0" +
			"\1\164\1\165\35\0\1\165\34\0\2\20\1\0\2\20" +
			"\3\0\2\20\1\0\1\20\7\0\3\20\17\0\26\20" +
			"\6\0\4\20\3\0\1\21\4\0\1\21\5\0\1\21" +
			"\17\0\1\21\47\0\6\166\1\167\1\170\1\0\5\166" +
			"\1\0\1\166\1\171\1\166\1\172\63\166\1\0\1\17" +
			"\7\0\1\17\1\173\1\164\1\165\10\0\1\173\24\0" +
			"\1\165\34\0\1\164\7\0\1\164\1\0\1\174\107\0" +
			"\1\175\27\0\1\176\40\0\10\27\1\0\5\27\1\0" +
			"\1\177\1\200\65\27\46\0\1\201\37\0\10\31\1\0" +
			"\5\31\1\0\1\31\1\202\1\203\64\31\23\0\1\204" +
			"\63\0\2\20\1\0\2\20\3\0\2\20\1\0\1\20" +
			"\7\0\3\20\17\0\4\20\1\205\21\20\6\0\4\20" +
			"\27\0\1\206\15\0\1\207\70\0\1\210\107\0\1\211" +
			"\120\0\1\212\73\0\1\213\11\0\1\214\121\0\1\215" +
			"\50\0\1\216\14\0\1\217\1\0\1\220\1\0\1\221" +
			"\6\0\1\222\1\223\75\0\1\224\41\0\2\20\1\0" +
			"\2\20\3\0\2\20\1\0\1\20\7\0\3\20\10\0" +
			"\1\225\6\0\26\20\6\0\4\20\1\0\2\20\1\0" +
			"\2\20\3\0\2\20\1\0\1\20\7\0\3\20\17\0" +
			"\2\20\1\226\14\20\1\227\1\20\1\230\4\20\6\0" +
			"\4\20\1\0\2\20\1\0\2\20\3\0\2\20\1\0" +
			"\1\20\7\0\3\20\17\0\4\20\1\231\21\20\6\0" +
			"\4\20\1\0\2\20\1\0\2\20\3\0\2\20\1\0" +
			"\1\20\7\0\3\20\17\0\10\20\1\232\1\233\1\20" +
			"\1\234\12\20\6\0\4\20\1\0\2\20\1\0\2\20" +
			"\3\0\2\20\1\0\1\20\7\0\1\20\1\235\1\20" +
			"\17\0\6\20\1\236\1\237\16\20\6\0\4\20\1\0" +
			"\2\20\1\0\2\20\3\0\2\20\1\0\1\20\7\0" +
			"\3\20\17\0\3\20\1\240\2\20\1\241\4\20\1\242" +
			"\4\20\1\243\5\20\6\0\4\20\1\0\2\20\1\0" +
			"\2\20\3\0\2\20\1\0\1\20\7\0\3\20\17\0" +
			"\10\20\1\244\15\20\6\0\4\20\1\0\2\20\1\0" +
			"\2\20\3\0\2\20\1\0\1\20\7\0\3\20\17\0" +
			"\4\20\1\245\21\20\6\0\4\20\1\0\2\20\1\0" +
			"\2\20\3\0\2\20\1\0\1\20\7\0\3\20\17\0" +
			"\1\20\1\246\1\20\1\247\1\250\15\20\1\251\3\20" +
			"\6\0\4\20\1\0\2\20\1\0\2\20\3\0\2\20" +
			"\1\0\1\20\7\0\3\20\17\0\3\20\1\252\1\253" +
			"\1\20\1\254\17\20\6\0\4\20\1\0\2\20\1\0" +
			"\2\20\3\0\2\20\1\0\1\20\7\0\3\20\17\0" +
			"\4\20\1\255\13\20\1\256\1\257\4\20\6\0\4\20" +
			"\1\0\2\20\1\0\2\20\3\0\2\20\1\0\1\20" +
			"\7\0\3\20\17\0\5\20\1\260\2\20\1\261\1\262" +
			"\13\20\1\263\6\0\4\20\1\0\2\20\1\0\2\20" +
			"\3\0\2\20\1\0\1\20\7\0\3\20\17\0\2\20" +
			"\1\264\23\20\6\0\4\20\1\0\2\20\1\0\2\20" +
			"\3\0\2\20\1\0\1\20\7\0\3\20\17\0\6\20" +
			"\1\265\1\266\10\20\1\267\5\20\6\0\4\20\1\0" +
			"\2\20\1\0\2\20\3\0\2\20\1\0\1\20\7\0" +
			"\3\20\17\0\24\20\1\270\1\20\6\0\4\20\1\0" +
			"\2\20\1\0\2\20\3\0\2\20\1\0\1\20\7\0" +
			"\3\20\17\0\13\20\1\271\12\20\6\0\4\20\1\0" +
			"\2\20\1\0\2\20\3\0\2\20\1\0\1\20\7\0" +
			"\3\20\17\0\13\20\1\272\3\20\1\273\6\20\6\0" +
			"\4\20\1\0\2\20\1\0\2\20\3\0\2\20\1\0" +
			"\1\20\7\0\3\20\17\0\2\20\1\274\1\275\2\20" +
			"\1\276\17\20\6\0\4\20\1\0\2\20\1\0\2\20" +
			"\3\0\2\20\1\0\1\20\7\0\3\20\17\0\6\20" +
			"\1\277\4\20\1\300\4\20\1\301\5\20\6\0\4\20" +
			"\45\0\1\302\27\0\1\303\55\0\1\304\105\0\1\305" +
			"\46\0\1\167\1\170\35\0\1\306\105\0\1\307\71\0" +
			"\1\310\1\311\12\0\1\312\41\0\2\110\1\0\2\110" +
			"\3\0\2\110\1\0\1\110\7\0\3\110\17\0\26\110" +
			"\6\0\4\110\41\0\1\217\45\0\2\110\1\0\2\110" +
			"\3\0\2\110\1\0\1\110\7\0\3\110\17\0\13\110" +
			"\1\313\12\110\6\0\4\110\1\0\2\110\1\0\2\110" +
			"\3\0\2\110\1\0\1\110\7\0\3\110\17\0\11\110" +
			"\1\314\14\110\6\0\4\110\1\0\2\123\6\0\4\123" +
			"\7\0\4\123\1\315\16\0\25\123\6\0\4\123\33\0" +
			"\1\316\60\0\1\317\24\0\1\320\52\0\40\321\1\322" +
			"\45\321\1\0\2\131\6\0\4\131\7\0\4\131\1\323" +
			"\16\0\25\131\6\0\4\131\3\0\1\132\4\0\1\132" +
			"\5\0\1\132\17\0\1\132\47\0\40\324\1\325\45\324" +
			"\3\141\1\0\4\141\1\0\5\141\1\0\12\141\1\0" +
			"\4\141\2\0\1\141\3\0\42\141\6\0\1\326\23\0" +
			"\1\327\7\0\1\330\45\0\1\331\7\0\1\331\1\0" +
			"\1\331\7\0\3\331\12\0\1\217\5\0\25\331\6\0" +
			"\4\331\1\0\2\145\6\0\4\145\7\0\4\145\1\332" +
			"\16\0\25\145\6\0\4\145\17\147\1\0\70\147\1\333" +
			"\7\147\1\333\1\147\1\333\2\147\1\0\4\147\3\333" +
			"\12\147\1\334\5\147\25\333\6\147\4\333\21\152\1\0" +
			"\66\152\1\335\7\152\1\335\1\152\1\335\4\152\1\0" +
			"\2\152\3\335\12\152\1\336\5\152\25\335\6\152\4\335" +
			"\32\0\1\337\54\0\2\160\1\0\2\160\3\0\2\160" +
			"\1\0\1\160\7\0\3\160\5\0\1\340\11\0\26\160" +
			"\6\0\4\160\30\0\1\341\56\0\1\164\7\0\1\164" +
			"\2\0\1\165\35\0\1\165\34\0\1\342\7\0\1\342" +
			"\3\0\1\342\11\0\1\342\56\0\6\166\1\343\1\166" +
			"\1\0\5\166\1\0\1\166\1\171\1\166\1\172\63\166" +
			"\10\167\1\0\5\167\1\0\67\167\7\344\1\345\76\344" +
			"\10\166\1\0\5\166\1\0\67\166\6\172\1\346\1\172" +
			"\1\347\5\172\1\347\1\172\1\350\2\172\1\166\62\172" +
			"\1\0\2\173\6\0\1\173\2\0\1\173\35\0\3\173" +
			"\3\0\1\173\1\0\1\173\1\0\1\173\15\0\3\173" +
			"\14\0\1\351\72\0\3\27\1\352\4\27\1\353\25\27" +
			"\1\352\47\27\37\0\1\225\46\0\3\31\1\354\4\31" +
			"\1\355\25\31\1\354\47\31\33\0\1\356\53\0\2\20" +
			"\1\0\2\20\3\0\2\20\1\0\1\20\7\0\3\20" +
			"\17\0\1\20\1\357\24\20\6\0\4\20\22\0\1\360" +
			"\4\0\1\361\123\0\1\362\73\0\1\363\11\0\1\364" +
			"\117\0\1\365\75\0\1\366\37\0\1\367\7\0\1\367" +
			"\13\0\1\370\153\0\1\371\61\0\1\372\103\0\1\373" +
			"\40\0\40\225\1\374\45\225\1\0\2\20\1\0\2\20" +
			"\3\0\2\20\1\0\1\20\7\0\3\20\17\0\3\20" +
			"\1\375\15\20\1\376\4\20\6\0\4\20\1\0\2\20" +
			"\1\0\2\20\3\0\2\20\1\0\1\20\7\0\3\20" +
			"\17\0\2\20\1\377\10\20\1\u0100\12\20\6\0\4\20" +
			"\1\0\2\20\1\0\2\20\3\0\2\20\1\0\1\20" +
			"\7\0\3\20\17\0\23\20\1\u0101\2\20\6\0\4\20" +
			"\1\0\2\20\1\0\2\20\3\0\2\20\1\0\1\20" +
			"\7\0\3\20\17\0\1\20\1\u0102\24\20\6\0\4\20" +
			"\1\0\2\20\1\0\2\20\3\0\2\20\1\0\1\20" +
			"\7\0\3\20\17\0\4\20\1\u0103\21\20\6\0\4\20" +
			"\1\0\2\20\1\0\2\20\3\0\2\20\1\0\1\20" +
			"\7\0\3\20\17\0\12\20\1\u0104\13\20\6\0\4\20" +
			"\1\0\2\20\1\0\2\20\3\0\2\20\1\0\1\20" +
			"\7\0\3\20\17\0\11\20\1\u0105\14\20\6\0\4\20" +
			"\1\0\2\20\1\0\2\20\3\0\2\20\1\0\1\20" +
			"\7\0\3\20\17\0\1\20\1\u0106\24\20\6\0\4\20" +
			"\1\0\2\20\1\0\2\20\3\0\2\20\1\0\1\20" +
			"\7\0\3\20\17\0\16\20\1\u0107\7\20\6\0\4\20" +
			"\1\0\2\20\1\0\2\20\3\0\2\20\1\0\1\20" +
			"\7\0\3\20\17\0\10\20\1\u0108\15\20\6\0\4\20" +
			"\1\0\2\20\1\0\2\20\3\0\2\20\1\0\1\20" +
			"\7\0\3\20\17\0\11\20\1\u0109\14\20\6\0\4\20" +
			"\1\0\2\20\1\0\2\20\3\0\2\20\1\0\1\20" +
			"\7\0\3\20\17\0\7\20\1\u010a\16\20\6\0\4\20" +
			"\1\0\2\20\1\0\2\20\3\0\2\20\1\0\1\20" +
			"\7\0\3\20\17\0\11\20\1\u010b\14\20\6\0\4\20" +
			"\1\0\2\20\1\0\2\20\3\0\2\20\1\0\1\20" +
			"\7\0\3\20\17\0\2\20\1\u010c\23\20\6\0\4\20" +
			"\1\0\2\20\1\0\2\20\3\0\2\20\1\0\1\20" +
			"\7\0\3\20\17\0\1\20\1\u010d\24\20\6\0\4\20" +
			"\1\0\2\20\1\0\2\20\3\0\2\20\1\0\1\20" +
			"\7\0\3\20\17\0\6\20\1\u010e\17\20\6\0\4\20" +
			"\1\0\2\20\1\0\2\20\3\0\2\20\1\0\1\20" +
			"\7\0\3\20\17\0\23\20\1\u010f\2\20\6\0\4\20" +
			"\1\0\2\20\1\0\2\20\3\0\2\20\1\0\1\20" +
			"\7\0\3\20\17\0\1\20\1\u0110\24\20\6\0\4\20" +
			"\1\0\2\20\1\0\2\20\3\0\2\20\1\0\1\20" +
			"\7\0\3\20\17\0\13\20\1\u0111\12\20\6\0\4\20" +
			"\1\0\2\20\1\0\2\20\3\0\2\20\1\0\1\20" +
			"\7\0\3\20\17\0\7\20\1\u0112\16\20\6\0\4\20" +
			"\1\0\2\20\1\0\2\20\3\0\2\20\1\0\1\20" +
			"\7\0\3\20\17\0\22\20\1\u0113\3\20\6\0\4\20" +
			"\1\0\2\20\1\0\2\20\3\0\2\20\1\0\1\20" +
			"\7\0\3\20\17\0\1\20\1\u0114\23\20\1\u0115\6\0" +
			"\4\20\1\0\2\20\1\0\2\20\3\0\2\20\1\0" +
			"\1\20\7\0\3\20\17\0\5\20\1\u0116\1\20\1\u0117" +
			"\16\20\6\0\4\20\1\0\2\20\1\0\2\20\3\0" +
			"\2\20\1\0\1\20\7\0\3\20\17\0\11\20\1\u0118" +
			"\14\20\6\0\4\20\1\0\2\20\1\0\2\20\3\0" +
			"\2\20\1\0\1\20\7\0\3\20\17\0\1\20\1\u0119" +
			"\6\20\1\u011a\5\20\1\u011b\7\20\6\0\4\20\1\0" +
			"\2\20\1\0\2\20\3\0\2\20\1\0\1\20\7\0" +
			"\3\20\17\0\23\20\1\u011c\2\20\6\0\4\20\1\0" +
			"\2\20\1\0\2\20\3\0\2\20\1\0\1\20\7\0" +
			"\3\20\17\0\4\20\1\u011d\21\20\6\0\4\20\1\0" +
			"\2\20\1\0\2\20\3\0\2\20\1\0\1\20\7\0" +
			"\3\20\17\0\1\20\1\u011e\6\20\1\u011f\15\20\6\0" +
			"\4\20\1\0\2\20\1\0\2\20\3\0\2\20\1\0" +
			"\1\20\7\0\3\20\17\0\6\20\1\u0120\17\20\6\0" +
			"\4\20\1\0\2\20\1\0\2\20\3\0\2\20\1\0" +
			"\1\20\7\0\3\20\17\0\11\20\1\u0121\14\20\6\0" +
			"\4\20\1\0\2\20\1\0\2\20\3\0\2\20\1\0" +
			"\1\20\7\0\3\20\17\0\4\20\1\u0122\21\20\6\0" +
			"\4\20\1\0\2\20\1\0\2\20\3\0\2\20\1\0" +
			"\1\20\7\0\3\20\17\0\4\20\1\u0123\21\20\6\0" +
			"\4\20\1\0\2\20\1\0\2\20\3\0\2\20\1\0" +
			"\1\20\7\0\3\20\17\0\1\20\1\u0124\24\20\6\0" +
			"\4\20\1\0\2\20\1\0\2\20\3\0\2\20\1\0" +
			"\1\20\7\0\3\20\17\0\13\20\1\u0125\12\20\6\0" +
			"\4\20\1\0\2\20\1\0\2\20\3\0\2\20\1\0" +
			"\1\20\7\0\3\20\17\0\13\20\1\u0126\4\20\1\u0127" +
			"\5\20\6\0\4\20\1\0\2\20\1\0\2\20\3\0" +
			"\2\20\1\0\1\20\7\0\3\20\17\0\14\20\1\u0128" +
			"\11\20\6\0\4\20\1\0\2\20\1\0\2\20\3\0" +
			"\2\20\1\0\1\20\7\0\3\20\17\0\16\20\1\u0129" +
			"\7\20\6\0\4\20\1\0\2\20\1\0\2\20\3\0" +
			"\2\20\1\0\1\20\7\0\3\20\17\0\2\20\1\u012a" +
			"\23\20\6\0\4\20\1\0\2\20\1\0\2\20\3\0" +
			"\2\20\1\0\1\20\7\0\3\20\17\0\2\20\1\u012b" +
			"\23\20\6\0\4\20\1\0\2\20\1\0\2\20\3\0" +
			"\2\20\1\0\1\20\7\0\3\20\17\0\13\20\1\u012c" +
			"\12\20\6\0\4\20\45\0\1\u012d\62\0\1\360\64\0" +
			"\2\110\1\0\2\110\3\0\2\110\1\0\1\110\7\0" +
			"\3\110\17\0\11\110\1\u012e\14\110\6\0\4\110\1\0" +
			"\2\110\1\0\2\110\3\0\2\110\1\0\1\110\7\0" +
			"\3\110\17\0\1\110\1\u012f\24\110\6\0\4\110\1\0" +
			"\2\315\6\0\4\315\7\0\4\315\17\0\25\315\6\0" +
			"\4\315\33\0\1\u0130\53\0\2\323\6\0\4\323\7\0" +
			"\4\323\17\0\25\323\6\0\4\323\27\0\1\u0131\56\0" +
			"\42\330\1\u0132\43\330\1\0\2\331\6\0\4\331\7\0" +
			"\4\331\1\u0133\13\0\1\u0134\2\0\25\331\6\0\4\331" +
			"\1\0\2\332\6\0\4\332\7\0\4\332\17\0\25\332" +
			"\6\0\4\332\1\147\2\333\6\147\4\333\2\147\1\0" +
			"\4\147\4\333\1\u0135\13\147\1\u0136\2\147\25\333\6\147" +
			"\4\333\1\147\1\u0137\7\147\1\u0137\5\147\1\0\5\147" +
			"\1\u0138\60\147\1\152\2\335\6\152\4\335\4\152\1\0" +
			"\2\152\4\335\1\u0139\13\152\1\u013a\2\152\25\335\6\152" +
			"\4\335\1\152\1\u013b\7\152\1\u013b\7\152\1\0\3\152" +
			"\1\u013c\60\152\27\0\1\u013d\56\0\20\340\1\0\14\340" +
			"\1\u013e\1\0\47\340\1\0\1\342\7\0\1\342\120\0" +
			"\2\343\33\0\1\343\11\0\1\343\12\0\7\344\1\u013f" +
			"\76\344\6\u0140\1\u0141\1\345\76\u0140\23\347\1\166\2\346" +
			"\33\347\1\346\11\347\1\346\35\347\1\166\62\347\10\172" +
			"\1\347\5\172\1\347\4\172\1\166\62\172\3\27\1\352" +
			"\4\27\1\353\6\27\1\177\1\200\15\27\1\352\57\27" +
			"\1\0\6\27\1\177\1\200\65\27\3\31\1\354\4\31" +
			"\1\355\7\31\1\202\1\203\14\31\1\354\57\31\1\0" +
			"\7\31\1\202\1\203\64\31\102\0\1\u0142\32\0\1\u0143" +
			"\123\0\1\u0144\124\0\1\u0145\65\0\1\u0146\42\0\1\367" +
			"\7\0\1\367\32\0\1\u0134\42\0\2\u0147\6\0\1\u0147" +
			"\2\0\1\u0147\35\0\3\u0147\3\0\1\u0147\1\0\1\u0147" +
			"\1\0\1\u0147\15\0\3\u0147\72\0\1\u0148\60\0\1\u0149" +
			"\42\0\2\20\1\0\2\20\3\0\2\20\1\0\1\20" +
			"\7\0\3\20\17\0\4\20\1\u014a\21\20\6\0\4\20" +
			"\1\0\2\20\1\0\2\20\3\0\2\20\1\0\1\20" +
			"\7\0\3\20\17\0\20\20\1\u014b\5\20\6\0\4\20" +
			"\1\0\2\20\1\0\2\20\3\0\2\20\1\0\1\20" +
			"\7\0\3\20\17\0\10\20\1\u014c\15\20\6\0\4\20" +
			"\1\0\2\20\1\0\2\20\3\0\2\20\1\0\1\20" +
			"\7\0\3\20\17\0\4\20\1\u014d\21\20\6\0\4\20" +
			"\1\0\2\20\1\0\2\20\3\0\2\20\1\0\1\20" +
			"\7\0\3\20\17\0\3\20\1\u014e\22\20\6\0\4\20" +
			"\1\0\2\20\1\0\2\20\3\0\2\20\1\0\1\20" +
			"\7\0\3\20\17\0\4\20\1\u014f\21\20\6\0\4\20" +
			"\1\0\2\20\1\0\2\20\3\0\2\20\1\0\1\20" +
			"\7\0\3\20\17\0\1\20\1\u0150\24\20\6\0\4\20" +
			"\1\0\2\20\1\0\2\20\3\0\2\20\1\0\1\20" +
			"\7\0\3\20\17\0\4\20\1\u0151\21\20\6\0\4\20" +
			"\1\0\2\20\1\0\2\20\3\0\2\20\1\0\1\20" +
			"\7\0\3\20\17\0\17\20\1\u0152\6\20\6\0\4\20" +
			"\1\0\2\20\1\0\2\20\3\0\2\20\1\0\1\20" +
			"\7\0\3\20\17\0\4\20\1\u0153\21\20\6\0\4\20" +
			"\1\0\2\20\1\0\2\20\3\0\2\20\1\0\1\20" +
			"\7\0\3\20\17\0\16\20\1\u0154\7\20\6\0\4\20" +
			"\1\0\2\20\1\0\2\20\3\0\2\20\1\0\1\20" +
			"\7\0\3\20\17\0\10\20\1\u0155\15\20\6\0\4\20" +
			"\1\0\2\20\1\0\2\20\3\0\2\20\1\0\1\20" +
			"\7\0\3\20\17\0\6\20\1\u0156\17\20\6\0\4\20" +
			"\1\0\2\20\1\0\2\20\3\0\2\20\1\0\1\20" +
			"\7\0\3\20\17\0\1\20\1\u0157\24\20\6\0\4\20" +
			"\1\0\2\20\1\0\2\20\3\0\2\20\1\0\1\20" +
			"\7\0\3\20\17\0\4\20\1\u0158\21\20\6\0\4\20" +
			"\1\0\2\20\1\0\2\20\3\0\2\20\1\0\1\20" +
			"\7\0\3\20\17\0\1\20\1\u0159\24\20\6\0\4\20" +
			"\1\0\2\20\1\0\2\20\3\0\2\20\1\0\1\20" +
			"\7\0\3\20\17\0\7\20\1\u015a\16\20\6\0\4\20" +
			"\1\0\2\20\1\0\2\20\3\0\2\20\1\0\1\20" +
			"\7\0\3\20\17\0\13\20\1\u015b\12\20\6\0\4\20" +
			"\1\0\2\20\1\0\2\20\3\0\2\20\1\0\1\20" +
			"\7\0\3\20\17\0\4\20\1\u015c\21\20\6\0\4\20" +
			"\1\0\2\20\1\0\2\20\3\0\2\20\1\0\1\20" +
			"\7\0\3\20\17\0\6\20\1\u015d\17\20\6\0\4\20" +
			"\1\0\2\20\1\0\2\20\3\0\2\20\1\0\1\20" +
			"\7\0\3\20\17\0\4\20\1\u015e\21\20\6\0\4\20" +
			"\1\0\2\20\1\0\2\20\3\0\2\20\1\0\1\20" +
			"\7\0\3\20\17\0\6\20\1\u015f\17\20\6\0\4\20" +
			"\1\0\2\20\1\0\2\20\3\0\2\20\1\0\1\20" +
			"\7\0\3\20\17\0\4\20\1\u0160\21\20\6\0\4\20" +
			"\1\0\2\20\1\0\2\20\3\0\2\20\1\0\1\20" +
			"\7\0\3\20\17\0\1\20\1\u0161\24\20\6\0\4\20" +
			"\1\0\2\20\1\0\2\20\3\0\2\20\1\0\1\20" +
			"\7\0\3\20\17\0\7\20\1\u0162\16\20\6\0\4\20" +
			"\1\0\2\20\1\0\2\20\3\0\2\20\1\0\1\20" +
			"\7\0\3\20\17\0\7\20\1\u0163\10\20\1\u0164\5\20" +
			"\6\0\4\20\1\0\2\20\1\0\2\20\3\0\2\20" +
			"\1\0\1\20\7\0\3\20\17\0\6\20\1\u0165\17\20" +
			"\6\0\4\20\1\0\2\20\1\0\2\20\3\0\2\20" +
			"\1\0\1\20\7\0\3\20\17\0\16\20\1\u0166\7\20" +
			"\6\0\4\20\1\0\2\20\1\0\2\20\3\0\2\20" +
			"\1\0\1\20\7\0\3\20\17\0\4\20\1\u0167\21\20" +
			"\6\0\4\20\1\0\2\20\1\0\2\20\3\0\2\20" +
			"\1\0\1\20\7\0\3\20\17\0\10\20\1\u0168\15\20" +
			"\6\0\4\20\1\0\2\20\1\0\2\20\3\0\2\20" +
			"\1\0\1\20\7\0\3\20\17\0\1\20\1\u0169\6\20" +
			"\1\u016a\15\20\6\0\4\20\1\0\2\20\1\0\2\20" +
			"\3\0\2\20\1\0\1\20\7\0\3\20\17\0\2\20" +
			"\1\u016b\23\20\6\0\4\20\1\0\2\20\1\0\2\20" +
			"\3\0\2\20\1\0\1\20\7\0\3\20\17\0\7\20" +
			"\1\u016c\16\20\6\0\4\20\1\0\2\20\1\0\2\20" +
			"\3\0\2\20\1\0\1\20\7\0\3\20\17\0\17\20" +
			"\1\u016d\6\20\6\0\4\20\1\0\2\20\1\0\2\20" +
			"\3\0\2\20\1\0\1\20\7\0\3\20\17\0\7\20" +
			"\1\u016e\16\20\6\0\4\20\1\0\2\20\1\0\2\20" +
			"\3\0\2\20\1\0\1\20\7\0\3\20\17\0\24\20" +
			"\1\u016f\1\20\6\0\4\20\1\0\2\20\1\0\2\20" +
			"\3\0\2\20\1\0\1\20\7\0\3\20\17\0\1\20" +
			"\1\u0170\24\20\6\0\4\20\1\0\2\20\1\0\2\20" +
			"\3\0\2\20\1\0\1\20\7\0\3\20\17\0\7\20" +
			"\1\u0171\16\20\6\0\4\20\1\0\2\20\1\0\2\20" +
			"\3\0\2\20\1\0\1\20\7\0\3\20\17\0\15\20" +
			"\1\u0172\10\20\6\0\4\20\1\0\2\20\1\0\2\20" +
			"\3\0\2\20\1\0\1\20\7\0\3\20\17\0\1\20" +
			"\1\u0173\24\20\6\0\4\20\1\0\2\20\1\0\2\20" +
			"\3\0\2\20\1\0\1\20\7\0\3\20\17\0\12\20" +
			"\1\u0174\13\20\6\0\4\20\1\0\2\110\1\0\2\110" +
			"\3\0\2\110\1\0\1\110\7\0\3\110\17\0\1\110" +
			"\1\u0175\24\110\6\0\4\110\27\0\1\u0176\56\0\33\330" +
			"\1\u0177\52\330\1\0\2\u0133\6\0\4\u0133\7\0\4\u0133" +
			"\14\0\1\u0134\2\0\25\u0133\6\0\4\u0133\1\147\2\u0135" +
			"\6\147\4\u0135\2\147\1\0\4\147\4\u0135\14\147\1\u0136" +
			"\2\147\25\u0135\6\147\4\u0135\1\147\1\u0137\7\147\1\u0137" +
			"\5\147\1\0\24\147\1\u0136\42\147\2\u0178\6\147\1\u0178" +
			"\2\147\1\u0178\2\147\1\0\32\147\3\u0178\3\147\1\u0178" +
			"\1\147\1\u0178\1\147\1\u0178\15\147\3\u0178\1\147\1\152" +
			"\2\u0139\6\152\4\u0139\4\152\1\0\2\152\4\u0139\14\152" +
			"\1\u013a\2\152\25\u0139\6\152\4\u0139\1\152\1\u013b\7\152" +
			"\1\u013b\7\152\1\0\22\152\1\u013a\42\152\2\u0179\6\152" +
			"\1\u0179\2\152\1\u0179\4\152\1\0\30\152\3\u0179\3\152" +
			"\1\u0179\1\152\1\u0179\1\152\1\u0179\15\152\3\u0179\1\152" +
			"\27\0\1\u017a\56\0\6\344\1\u017b\1\u013f\76\344\7\u0140" +
			"\1\u017c\76\u0140\103\0\1\u017d\2\0\6\u0143\1\u017e\20\u0143" +
			"\1\u017f\1\u0143\1\u0180\54\u0143\55\0\1\u0181\73\0\1\u0182" +
			"\1\0\1\214\41\0\2\u0147\6\0\1\u0147\2\0\1\u0147" +
			"\27\0\1\u0134\5\0\3\u0147\3\0\1\u0147\1\0\1\u0147" +
			"\1\0\1\u0147\15\0\3\u0147\45\0\1\u0183\104\0\1\u0184" +
			"\1\0\1\312\41\0\2\20\1\0\2\20\3\0\2\20" +
			"\1\0\1\20\7\0\3\20\17\0\22\20\1\u0185\3\20" +
			"\6\0\4\20\1\0\2\20\1\0\2\20\3\0\2\20" +
			"\1\0\1\20\7\0\3\20\17\0\20\20\1\u0186\5\20" +
			"\6\0\4\20\1\0\2\20\1\0\2\20\3\0\2\20" +
			"\1\0\1\20\7\0\3\20\17\0\2\20\1\u0187\23\20" +
			"\6\0\4\20\1\0\2\20\1\0\2\20\3\0\2\20" +
			"\1\0\1\20\7\0\3\20\17\0\5\20\1\u0188\20\20" +
			"\6\0\4\20\1\0\2\20\1\0\2\20\3\0\2\20" +
			"\1\0\1\20\7\0\3\20\17\0\11\20\1\u0189\14\20" +
			"\6\0\4\20\1\0\2\20\1\0\2\20\3\0\2\20" +
			"\1\0\1\20\7\0\3\20\17\0\1\20\1\u018a\24\20" +
			"\6\0\4\20\1\0\2\20\1\0\2\20\3\0\2\20" +
			"\1\0\1\20\7\0\3\20\17\0\4\20\1\u018b\21\20" +
			"\6\0\4\20\1\0\2\20\1\0\2\20\3\0\2\20" +
			"\1\0\1\20\7\0\3\20\17\0\7\20\1\u018c\16\20" +
			"\6\0\4\20\1\0\2\20\1\0\2\20\3\0\2\20" +
			"\1\0\1\20\7\0\3\20\17\0\13\20\1\u018d\12\20" +
			"\6\0\4\20\1\0\2\20\1\0\2\20\3\0\2\20" +
			"\1\0\1\20\7\0\3\20\17\0\2\20\1\u018e\23\20" +
			"\6\0\4\20\1\0\2\20\1\0\2\20\3\0\2\20" +
			"\1\0\1\20\7\0\3\20\17\0\16\20\1\u018f\7\20" +
			"\6\0\4\20\1\0\2\20\1\0\2\20\3\0\2\20" +
			"\1\0\1\20\7\0\3\20\17\0\24\20\1\u0190\1\20" +
			"\6\0\4\20\1\0\2\20\1\0\2\20\3\0\2\20" +
			"\1\0\1\20\7\0\3\20\17\0\10\20\1\u0191\15\20" +
			"\6\0\4\20\1\0\2\20\1\0\2\20\3\0\2\20" +
			"\1\0\1\20\7\0\3\20\17\0\3\20\1\u0192\22\20" +
			"\6\0\4\20\1\0\2\20\1\0\2\20\3\0\2\20" +
			"\1\0\1\20\7\0\3\20\17\0\1\20\1\u0193\24\20" +
			"\6\0\4\20\1\0\2\20\1\0\2\20\3\0\2\20" +
			"\1\0\1\20\7\0\3\20\17\0\25\20\1\u0194\6\0" +
			"\4\20\1\0\2\20\1\0\2\20\3\0\2\20\1\0" +
			"\1\20\7\0\3\20\17\0\2\20\1\u0195\23\20\6\0" +
			"\4\20\1\0\2\20\1\0\2\20\3\0\2\20\1\0" +
			"\1\20\7\0\3\20\17\0\6\20\1\u0196\17\20\6\0" +
			"\4\20\1\0\2\20\1\0\2\20\3\0\2\20\1\0" +
			"\1\20\7\0\3\20\17\0\3\20\1\u0197\22\20\6\0" +
			"\4\20\1\0\2\20\1\0\2\20\3\0\2\20\1\0" +
			"\1\20\7\0\3\20\17\0\4\20\1\u0198\21\20\6\0" +
			"\4\20\1\0\2\20\1\0\2\20\3\0\2\20\1\0" +
			"\1\20\7\0\3\20\17\0\2\20\1\u0199\23\20\6\0" +
			"\4\20\1\0\2\20\1\0\2\20\3\0\2\20\1\0" +
			"\1\20\7\0\3\20\17\0\15\20\1\u019a\10\20\6\0" +
			"\4\20\1\0\2\20\1\0\2\20\3\0\2\20\1\0" +
			"\1\20\7\0\3\20\17\0\17\20\1\u019b\6\20\6\0" +
			"\4\20\1\0\2\20\1\0\2\20\3\0\2\20\1\0" +
			"\1\20\7\0\3\20\17\0\10\20\1\u019c\15\20\6\0" +
			"\4\20\1\0\2\20\1\0\2\20\3\0\2\20\1\0" +
			"\1\20\7\0\3\20\17\0\13\20\1\u019d\12\20\6\0" +
			"\4\20\1\0\2\20\1\0\2\20\3\0\2\20\1\0" +
			"\1\20\7\0\3\20\17\0\1\20\1\u019e\24\20\6\0" +
			"\4\20\1\0\2\20\1\0\2\20\3\0\2\20\1\0" +
			"\1\20\7\0\3\20\17\0\2\20\1\u019f\23\20\6\0" +
			"\4\20\1\0\2\20\1\0\2\20\3\0\2\20\1\0" +
			"\1\20\7\0\3\20\17\0\12\20\1\u01a0\13\20\6\0" +
			"\4\20\1\0\2\20\1\0\2\20\3\0\2\20\1\0" +
			"\1\20\7\0\3\20\17\0\4\20\1\u01a1\21\20\6\0" +
			"\4\20\1\0\2\20\1\0\2\20\3\0\2\20\1\0" +
			"\1\20\7\0\3\20\17\0\6\20\1\u01a2\17\20\6\0" +
			"\4\20\1\0\2\20\1\0\2\20\3\0\2\20\1\0" +
			"\1\20\7\0\3\20\17\0\4\20\1\u01a3\21\20\6\0" +
			"\4\20\1\0\2\20\1\0\2\20\3\0\2\20\1\0" +
			"\1\20\7\0\3\20\17\0\13\20\1\u01a4\12\20\6\0" +
			"\4\20\1\0\2\20\1\0\2\20\3\0\2\20\1\0" +
			"\1\20\7\0\3\20\17\0\6\20\1\u01a5\17\20\6\0" +
			"\4\20\1\0\2\20\1\0\2\20\3\0\2\20\1\0" +
			"\1\20\7\0\3\20\17\0\3\20\1\u01a6\22\20\6\0" +
			"\4\20\6\u0176\1\u01a7\20\u0176\1\u01a8\1\u0176\1\u01a9\54\u0176" +
			"\1\147\2\u0178\6\147\1\u0178\2\147\1\u0178\2\147\1\0" +
			"\24\147\1\u0136\5\147\3\u0178\3\147\1\u0178\1\147\1\u0178" +
			"\1\147\1\u0178\15\147\3\u0178\1\147\1\152\2\u0179\6\152" +
			"\1\u0179\2\152\1\u0179\4\152\1\0\22\152\1\u013a\5\152" +
			"\3\u0179\3\152\1\u0179\1\152\1\u0179\1\152\1\u0179\15\152" +
			"\3\u0179\1\152\6\u0140\1\u0141\1\u017c\76\u0140\104\0\1\u01aa" +
			"\1\0\6\u0143\1\u01ab\20\u0143\1\u01ac\1\u0143\1\u01ac\62\u0143" +
			"\1\u01ad\20\u0143\1\u01ae\1\u0143\1\u01ac\62\u0143\1\u01ad\20\u0143" +
			"\1\u01ac\2\u0143\1\u01ac\53\u0143\51\0\1\u01af\60\0\1\u01b0" +
			"\124\0\1\u01b1\1\0\1\221\115\0\1\u01b2\31\0\2\20" +
			"\1\0\2\20\3\0\2\20\1\0\1\20\7\0\3\20" +
			"\17\0\5\20\1\u01b3\20\20\6\0\4\20\1\0\2\20" +
			"\1\0\2\20\3\0\2\20\1\0\1\20\7\0\3\20" +
			"\17\0\11\20\1\u01b4\14\20\6\0\4\20\1\0\2\20" +
			"\1\0\2\20\3\0\2\20\1\0\1\20\7\0\3\20" +
			"\17\0\13\20\1\u01b5\12\20\6\0\4\20\1\0\2\20" +
			"\1\0\2\20\3\0\2\20\1\0\1\20\7\0\3\20" +
			"\17\0\12\20\1\u01b6\13\20\6\0\4\20\1\0\2\20" +
			"\1\0\2\20\3\0\2\20\1\0\1\20\7\0\3\20" +
			"\17\0\13\20\1\u01b7\12\20\6\0\4\20\1\0\2\20" +
			"\1\0\2\20\3\0\2\20\1\0\1\20\7\0\3\20" +
			"\17\0\7\20\1\u01b8\16\20\6\0\4\20\1\0\2\20" +
			"\1\0\2\20\3\0\2\20\1\0\1\20\7\0\3\20" +
			"\17\0\16\20\1\u01b9\7\20\6\0\4\20\1\0\2\20" +
			"\1\0\2\20\3\0\2\20\1\0\1\20\7\0\3\20" +
			"\17\0\17\20\1\u01ba\6\20\6\0\4\20\1\0\2\20" +
			"\1\0\2\20\3\0\2\20\1\0\1\20\7\0\3\20" +
			"\17\0\4\20\1\u01bb\21\20\6\0\4\20\1\0\2\20" +
			"\1\0\2\20\3\0\2\20\1\0\1\20\7\0\3\20" +
			"\17\0\23\20\1\u01bc\2\20\6\0\4\20\1\0\2\20" +
			"\1\0\2\20\3\0\2\20\1\0\1\20\7\0\3\20" +
			"\17\0\7\20\1\u01bd\16\20\6\0\4\20\1\0\2\20" +
			"\1\0\2\20\3\0\2\20\1\0\1\20\7\0\3\20" +
			"\17\0\4\20\1\u01be\21\20\6\0\4\20\1\0\2\20" +
			"\1\0\2\20\3\0\2\20\1\0\1\20\7\0\3\20" +
			"\17\0\13\20\1\u01bf\12\20\6\0\4\20\1\0\2\20" +
			"\1\0\2\20\3\0\2\20\1\0\1\20\7\0\3\20" +
			"\17\0\5\20\1\u01c0\3\20\1\u01c1\14\20\6\0\4\20" +
			"\1\0\2\20\1\0\2\20\3\0\2\20\1\0\1\20" +
			"\7\0\3\20\17\0\11\20\1\u01c2\14\20\6\0\4\20" +
			"\1\0\2\20\1\0\2\20\3\0\2\20\1\0\1\20" +
			"\7\0\3\20\17\0\12\20\1\u01c3\13\20\6\0\4\20" +
			"\1\0\2\20\1\0\2\20\3\0\2\20\1\0\1\20" +
			"\7\0\3\20\17\0\25\20\1\u01c4\6\0\4\20\1\0" +
			"\2\20\1\0\2\20\3\0\2\20\1\0\1\20\7\0" +
			"\3\20\17\0\1\20\1\u01c5\24\20\6\0\4\20\1\0" +
			"\2\20\1\0\2\20\3\0\2\20\1\0\1\20\7\0" +
			"\3\20\17\0\11\20\1\u01c6\14\20\6\0\4\20\1\0" +
			"\2\20\1\0\2\20\3\0\2\20\1\0\1\20\7\0" +
			"\3\20\17\0\13\20\1\u01c7\12\20\6\0\4\20\1\0" +
			"\2\20\1\0\2\20\3\0\2\20\1\0\1\20\7\0" +
			"\3\20\17\0\1\20\1\u01c8\24\20\6\0\4\20\1\0" +
			"\2\20\1\0\2\20\3\0\2\20\1\0\1\20\7\0" +
			"\3\20\17\0\16\20\1\u01c9\7\20\6\0\4\20\1\0" +
			"\2\20\1\0\2\20\3\0\2\20\1\0\1\20\7\0" +
			"\3\20\17\0\16\20\1\u01ca\7\20\6\0\4\20\1\0" +
			"\2\20\1\0\2\20\3\0\2\20\1\0\1\20\7\0" +
			"\1\u01cb\2\20\17\0\26\20\6\0\4\20\1\0\2\20" +
			"\1\0\2\20\3\0\2\20\1\0\1\20\7\0\3\20" +
			"\17\0\6\20\1\u01cc\17\20\6\0\4\20\6\u0176\1\0" +
			"\20\u0176\1\0\1\u0176\1\0\62\u0176\1\0\20\u0176\1\u01cd" +
			"\1\u0176\1\0\62\u0176\1\0\20\u0176\1\0\2\u0176\1\0" +
			"\53\u0176\105\0\1\u01ce\3\u01ac\1\u01cf\2\u01ac\1\u01ab\1\u01ac" +
			"\1\u01cf\5\u01ac\1\u01cf\10\u01ac\1\u01d0\6\u01ac\1\u01cf\55\u01ac" +
			"\1\u01ad\105\u01ac\1\u01ab\77\u01ac\6\u0143\1\u01ad\22\u0143\1\u01ac" +
			"\1\u0143\1\u01d1\52\u0143\60\0\1\u01d2\74\0\1\u01d3\112\0" +
			"\1\u01d4\100\0\1\u01d5\37\0\2\20\1\0\2\20\3\0" +
			"\2\20\1\0\1\20\7\0\3\20\17\0\11\20\1\u01d6" +
			"\14\20\6\0\4\20\1\0\2\20\1\0\2\20\3\0" +
			"\2\20\1\0\1\20\7\0\3\20\17\0\10\20\1\u01d7" +
			"\15\20\6\0\4\20\1\0\2\20\1\0\2\20\3\0" +
			"\2\20\1\0\1\20\7\0\3\20\17\0\20\20\1\u01d8" +
			"\5\20\6\0\4\20\1\0\2\20\1\0\2\20\3\0" +
			"\2\20\1\0\1\20\7\0\3\20\17\0\21\20\1\u01d9" +
			"\4\20\6\0\4\20\1\0\2\20\1\0\2\20\3\0" +
			"\2\20\1\0\1\20\7\0\3\20\17\0\6\20\1\u01da" +
			"\17\20\6\0\4\20\1\0\2\20\1\0\2\20\3\0" +
			"\2\20\1\0\1\20\7\0\3\20\17\0\1\20\1\u01db" +
			"\24\20\6\0\4\20\1\0\2\20\1\0\2\20\3\0" +
			"\2\20\1\0\1\20\7\0\3\20\17\0\16\20\1\u01dc" +
			"\7\20\6\0\4\20\1\0\2\20\1\0\2\20\3\0" +
			"\2\20\1\0\1\20\7\0\3\20\17\0\6\20\1\u01dd" +
			"\17\20\6\0\4\20\1\0\2\20\1\0\2\20\3\0" +
			"\2\20\1\0\1\20\7\0\3\20\17\0\6\20\1\u01de" +
			"\17\20\6\0\4\20\1\0\2\20\1\0\2\20\3\0" +
			"\2\20\1\0\1\20\7\0\3\20\17\0\16\20\1\u01df" +
			"\7\20\6\0\4\20\1\0\2\20\1\0\2\20\3\0" +
			"\2\20\1\0\1\20\7\0\3\20\17\0\4\20\1\u01e0" +
			"\21\20\6\0\4\20\1\0\2\20\1\0\2\20\3\0" +
			"\2\20\1\0\1\20\7\0\3\20\17\0\4\20\1\u01e1" +
			"\21\20\6\0\4\20\1\0\2\20\1\0\2\20\3\0" +
			"\2\20\1\0\1\20\7\0\3\20\17\0\3\20\1\u01e2" +
			"\22\20\6\0\4\20\1\0\2\20\1\0\2\20\3\0" +
			"\2\20\1\0\1\20\7\0\3\20\17\0\12\20\1\u01e3" +
			"\13\20\6\0\4\20\1\0\2\20\1\0\2\20\3\0" +
			"\2\20\1\0\1\20\7\0\3\20\17\0\4\20\1\u01e4" +
			"\21\20\6\0\4\20\1\0\2\20\1\0\2\20\3\0" +
			"\2\20\1\0\1\20\7\0\3\20\17\0\1\20\1\u01e5" +
			"\24\20\6\0\4\20\1\0\2\20\1\0\2\20\3\0" +
			"\2\20\1\0\1\20\7\0\3\20\17\0\4\20\1\u01e6" +
			"\21\20\6\0\4\20\1\0\2\20\1\0\2\20\3\0" +
			"\2\20\1\0\1\20\7\0\3\20\17\0\7\20\1\u01e7" +
			"\16\20\6\0\4\20\6\u0176\1\0\22\u0176\1\0\1\u0176" +
			"\1\u01e8\52\u0176\104\0\1\u01e9\1\0\3\u01ac\1\u01cf\2\u01ac" +
			"\1\u01ad\1\u01ac\1\u01cf\5\u01ac\1\u01cf\10\u01ac\1\u01d0\6\u01ac" +
			"\1\u01cf\55\u01ac\1\u01ad\20\u01ac\1\u01ea\56\u01ac\52\0\1\u01eb" +
			"\77\0\1\u01ec\134\0\1\u01ed\56\0\1\310\42\0\2\20" +
			"\1\0\2\20\3\0\2\20\1\0\1\20\7\0\3\20" +
			"\17\0\4\20\1\u01ee\21\20\6\0\4\20\1\0\2\20" +
			"\1\0\2\20\3\0\2\20\1\0\1\20\7\0\3\20" +
			"\17\0\11\20\1\u01ef\14\20\6\0\4\20\1\0\2\20" +
			"\1\0\2\20\3\0\2\20\1\0\1\20\7\0\3\20" +
			"\17\0\16\20\1\u01f0\7\20\6\0\4\20\1\0\2\20" +
			"\1\0\2\20\3\0\2\20\1\0\1\20\7\0\3\20" +
			"\17\0\16\20\1\u01f1\7\20\6\0\4\20\1\0\2\20" +
			"\1\0\2\20\3\0\2\20\1\0\1\20\7\0\3\20" +
			"\17\0\7\20\1\u01f2\16\20\6\0\4\20\1\0\2\20" +
			"\1\0\2\20\3\0\2\20\1\0\1\20\7\0\3\20" +
			"\17\0\4\20\1\u01f3\21\20\6\0\4\20\1\0\2\20" +
			"\1\0\2\20\3\0\2\20\1\0\1\20\7\0\3\20" +
			"\17\0\11\20\1\u01f4\14\20\6\0\4\20\1\0\2\20" +
			"\1\0\2\20\3\0\2\20\1\0\1\20\7\0\3\20" +
			"\17\0\4\20\1\u01f5\21\20\6\0\4\20\1\0\2\20" +
			"\1\0\2\20\3\0\2\20\1\0\1\20\7\0\3\20" +
			"\17\0\4\20\1\u01f6\21\20\6\0\4\20\1\0\2\20" +
			"\1\0\2\20\3\0\2\20\1\0\1\20\7\0\3\20" +
			"\17\0\4\20\1\u01f7\21\20\6\0\4\20\22\0\1\u01f8" +
			"\63\0\6\u01ac\1\u01ad\24\u01ac\1\u01f9\52\u01ac\43\0\1\u01fa" +
			"\1\0\1\364\131\0\1\u01fb\15\0\2\20\1\0\2\20" +
			"\3\0\2\20\1\0\1\20\7\0\3\20\17\0\12\20" +
			"\1\u01fc\13\20\6\0\4\20\1\0\2\20\1\0\2\20" +
			"\3\0\2\20\1\0\1\20\7\0\3\20\17\0\4\20" +
			"\1\u01fd\21\20\6\0\4\20\1\0\2\20\1\0\2\20" +
			"\3\0\2\20\1\0\1\20\7\0\3\20\17\0\4\20" +
			"\1\u01fe\21\20\6\0\4\20\1\0\2\20\1\0\2\20" +
			"\3\0\2\20\1\0\1\20\7\0\3\20\17\0\20\20" +
			"\1\u01ff\5\20\6\0\4\20\1\0\2\20\1\0\2\20" +
			"\3\0\2\20\1\0\1\20\7\0\3\20\17\0\1\20" +
			"\1\u0200\24\20\6\0\4\20\1\0\2\20\1\0\2\20" +
			"\3\0\2\20\1\0\1\20\7\0\3\20\17\0\12\20" +
			"\1\u0201\13\20\6\0\4\20\24\0\1\u0202\125\0\1\220" +
			"\42\0\2\20\1\0\2\20\3\0\2\20\1\0\1\20" +
			"\7\0\3\20\17\0\5\20\1\u0203\20\20\6\0\4\20" +
			"\1\0\2\20\1\0\2\20\3\0\2\20\1\0\1\20" +
			"\7\0\3\20\17\0\10\20\1\u0204\15\20\6\0\4\20" +
			"\47\0\1\u0205\102\0\1\363\41\0";

	private static int[] zzUnpackTrans()
	{
		int[] result = new int[26460];
		int offset = 0;
		offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackTrans(String packed, int offset, int[] result)
	{
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while(i < l)
		{
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			value--;
			do
			{
				result[j++] = value;
			}
			while(--count > 0);
		}
		return j;
	}


	/* error codes */
	private static final int ZZ_UNKNOWN_ERROR = 0;
	private static final int ZZ_NO_MATCH = 1;
	private static final int ZZ_PUSHBACK_2BIG = 2;
	private static final char[] EMPTY_BUFFER = new char[0];
	private static final int YYEOF = -1;
	private static java.io.Reader zzReader = null; // Fake

	/* error messages for the codes above */
	private static final String ZZ_ERROR_MSG[] = {
			"Unkown internal scanner error",
			"Error: could not match input",
			"Error: pushback value was too large"
	};

	/**
	 * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
	 */
	private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

	private static final String ZZ_ATTRIBUTE_PACKED_0 = "\6\0\1\1\1\0\2\1\3\0\1\11\4\1\1\11" +
			"\6\1\1\11\7\1\4\11\1\1\1\11\1\1\1\11" +
			"\24\1\1\11\3\1\2\11\3\1\1\11\1\1\3\11" +
			"\3\1\2\11\1\1\1\11\5\1\1\11\2\1\3\11" +
			"\2\1\1\11\5\1\1\11\1\1\1\11\3\1\1\11" +
			"\2\1\1\11\11\1\1\0\3\1\3\11\1\1\1\0" +
			"\1\1\1\11\1\0\1\1\3\11\1\0\2\1\1\11" +
			"\3\0\2\11\2\0\1\1\1\0\54\1\6\11\1\1" +
			"\1\0\1\11\3\1\1\11\1\0\1\11\1\0\1\11" +
			"\1\1\1\0\2\11\3\0\5\1\1\0\1\1\1\11" +
			"\5\1\2\0\1\11\4\1\1\11\1\1\2\0\1\11" +
			"\1\1\1\11\6\0\2\11\60\1\1\11\2\1\1\11" +
			"\3\0\1\11\10\1\1\0\1\11\1\0\1\1\1\11" +
			"\2\0\1\11\1\0\1\1\2\0\55\1\1\0\1\11" +
			"\2\1\2\11\7\0\1\1\1\0\42\1\14\0\32\1" +
			"\4\0\1\1\4\0\22\1\1\11\2\0\1\11\1\1" +
			"\1\0\12\1\1\11\1\1\2\0\6\1\1\0\2\1" +
			"\1\0";

	private static int[] zzUnpackAttribute()
	{
		int[] result = new int[517];
		int offset = 0;
		offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAttribute(String packed, int offset, int[] result)
	{
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while(i < l)
		{
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do
			{
				result[j++] = value;
			}
			while(--count > 0);
		}
		return j;
	}

	/**
	 * the current state of the DFA
	 */
	private int zzState;

	/**
	 * the current lexical state
	 */
	private int zzLexicalState = YYINITIAL;

	/**
	 * this buffer contains the current text to be matched and is
	 * the source of the yytext() string
	 */
	private CharSequence zzBuffer = "";

	/**
	 * this buffer may contains the current text array to be matched when it is cheap to acquire it
	 */
	private char[] zzBufferArray;

	/**
	 * the textposition at the last accepting state
	 */
	private int zzMarkedPos;

	/**
	 * the textposition at the last state to be included in yytext
	 */
	private int zzPushbackPos;

	/**
	 * the current text position in the buffer
	 */
	private int zzCurrentPos;

	/**
	 * startRead marks the beginning of the yytext() string in the buffer
	 */
	private int zzStartRead;

	/**
	 * endRead marks the last character in the buffer, that has been read
	 * from input
	 */
	private int zzEndRead;

	/**
	 * zzAtBOL == true <=> the scanner is currently at the beginning of a line
	 */
	private boolean zzAtBOL = true;

	/**
	 * zzAtEOF == true <=> the scanner is at the EOF
	 */
	private boolean zzAtEOF;

	/**
	 * denotes if the user-EOF-code has already been executed
	 */
	private boolean zzEOFDone;

	/* user code: */
	public _JavaScriptLexer(boolean highlightMode, DialectOptionHolder _optionsHolder)
	{
		this((java.io.Reader) null);
		isHighlightModeOn = highlightMode;
		optionsHolder = _optionsHolder;
	}

	private boolean isHighlightModeOn = false;
	private DialectOptionHolder optionsHolder;
	private int tagCount = 0;

	public final int getTagCount()
	{
		return tagCount;
	}

	public final void setTagCount(int _tagCount)
	{
		tagCount = _tagCount;
	}


	_JavaScriptLexer(java.io.Reader in)
	{
		this.zzReader = in;
	}

	/**
	 * Creates a new scanner.
	 * There is also java.io.Reader version of this constructor.
	 *
	 * @param in the java.io.Inputstream to read input from.
	 */
	_JavaScriptLexer(java.io.InputStream in)
	{
		this(new java.io.InputStreamReader(in));
	}

	/**
	 * Unpacks the compressed character translation table.
	 *
	 * @param packed the packed character translation table
	 * @return the unpacked character translation table
	 */
	private static char[] zzUnpackCMap(String packed)
	{
		char[] map = new char[0x10000];
		int i = 0;  /* index in packed string  */
		int j = 0;  /* index in unpacked array */
		while(i < 1800)
		{
			int count = packed.charAt(i++);
			char value = packed.charAt(i++);
			do
			{
				map[j++] = value;
			}
			while(--count > 0);
		}
		return map;
	}

	@Override
	public final int getTokenStart()
	{
		return zzStartRead;
	}

	@Override
	public final int getTokenEnd()
	{
		return getTokenStart() + yylength();
	}

	@Override
	public void reset(CharSequence buffer, int start, int end, int initialState)
	{
		zzBuffer = buffer;
		zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
		zzCurrentPos = zzMarkedPos = zzStartRead = start;
		zzPushbackPos = 0;
		zzAtEOF = false;
		zzAtBOL = true;
		zzEndRead = end;
		yybegin(initialState);
	}

	// For Demetra compatibility
	public void reset(CharSequence buffer, int initialState)
	{
		zzBuffer = buffer;
		zzBufferArray = null;
		zzCurrentPos = zzMarkedPos = zzStartRead = 0;
		zzPushbackPos = 0;
		zzAtEOF = false;
		zzAtBOL = true;
		zzEndRead = buffer.length();
		yybegin(initialState);
	}

	/**
	 * Refills the input buffer.
	 *
	 * @return <code>false</code>, iff there was new input.
	 * @throws java.io.IOException if any I/O-Error occurs
	 */
	private boolean zzRefill() throws java.io.IOException
	{
		return true;
	}


	/**
	 * Returns the current lexical state.
	 */
	@Override
	public final int yystate()
	{
		return zzLexicalState;
	}


	/**
	 * Enters a new lexical state
	 *
	 * @param newState the new lexical state
	 */
	@Override
	public final void yybegin(int newState)
	{
		zzLexicalState = newState;
	}


	/**
	 * Returns the text matched by the current regular expression.
	 */
	public final CharSequence yytext()
	{
		return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
	}


	/**
	 * Returns the character at position <tt>pos</tt> from the
	 * matched text.
	 * <p/>
	 * It is equivalent to yytext().charAt(pos), but faster
	 *
	 * @param pos the position of the character to fetch.
	 *            A value from 0 to yylength()-1.
	 * @return the character at position pos
	 */
	public final char yycharat(int pos)
	{
		return zzBufferArray != null ? zzBufferArray[zzStartRead + pos] : zzBuffer.charAt(zzStartRead + pos);
	}


	/**
	 * Returns the length of the matched text region.
	 */
	public final int yylength()
	{
		return zzMarkedPos - zzStartRead;
	}


	/**
	 * Reports an error that occured while scanning.
	 * <p/>
	 * In a wellformed scanner (no or only correct usage of
	 * yypushback(int) and a match-all fallback rule) this method
	 * will only be called with things that "Can't Possibly Happen".
	 * If this method is called, something is seriously wrong
	 * (e.g. a JFlex bug producing a faulty scanner etc.).
	 * <p/>
	 * Usual syntax/scanner level error handling should be done
	 * in error fallback rules.
	 *
	 * @param errorCode the code of the errormessage to display
	 */
	private void zzScanError(int errorCode)
	{
		String message;
		try
		{
			message = ZZ_ERROR_MSG[errorCode];
		}
		catch(ArrayIndexOutOfBoundsException e)
		{
			message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
		}

		throw new Error(message);
	}


	/**
	 * Pushes the specified amount of characters back into the input stream.
	 * <p/>
	 * They will be read again by then next call of the scanning method
	 *
	 * @param number the number of characters to be read again.
	 *               This number must not be greater than yylength()!
	 */
	public void yypushback(int number)
	{
		if(number > yylength())
		{
			zzScanError(ZZ_PUSHBACK_2BIG);
		}

		zzMarkedPos -= number;
	}


	/**
	 * Contains user EOF-code, which will be executed exactly once,
	 * when the end of file is reached
	 */
	private void zzDoEOF()
	{
		if(!zzEOFDone)
		{
			zzEOFDone = true;

		}
	}


	/**
	 * Resumes scanning until the next regular expression is matched,
	 * the end of input is encountered or an I/O-Error occurs.
	 *
	 * @return the next token
	 * @throws java.io.IOException if any I/O-Error occurs
	 */
	@Override
	public IElementType advance() throws java.io.IOException
	{
		int zzInput;
		int zzAction;

		// cached fields:
		int zzCurrentPosL;
		int zzMarkedPosL;
		int zzEndReadL = zzEndRead;
		CharSequence zzBufferL = zzBuffer;
		char[] zzBufferArrayL = zzBufferArray;
		char[] zzCMapL = ZZ_CMAP;

		int[] zzTransL = ZZ_TRANS;
		int[] zzRowMapL = ZZ_ROWMAP;
		int[] zzAttrL = ZZ_ATTRIBUTE;

		while(true)
		{
			zzMarkedPosL = zzMarkedPos;

			zzAction = -1;

			zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

			zzState = zzLexicalState;


			zzForAction:
			{
				while(true)
				{

					if(zzCurrentPosL < zzEndReadL)
					{
						zzInput = zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++);
					}
					else if(zzAtEOF)
					{
						zzInput = YYEOF;
						break zzForAction;
					}
					else
					{
						// store back cached positions
						zzCurrentPos = zzCurrentPosL;
						zzMarkedPos = zzMarkedPosL;
						boolean eof = zzRefill();
						// get translated positions and possibly new buffer
						zzCurrentPosL = zzCurrentPos;
						zzMarkedPosL = zzMarkedPos;
						zzBufferL = zzBuffer;
						zzEndReadL = zzEndRead;
						if(eof)
						{
							zzInput = YYEOF;
							break zzForAction;
						}
						else
						{
							zzInput = zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++);
						}
					}
					int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
					if(zzNext == -1)
					{
						break zzForAction;
					}
					zzState = zzNext;

					int zzAttributes = zzAttrL[zzState];
					if((zzAttributes & 1) == 1)
					{
						zzAction = zzState;
						zzMarkedPosL = zzCurrentPosL;
						if((zzAttributes & 8) == 8)
						{
							break zzForAction;
						}
					}

				}
			}

			// store back cached position
			zzMarkedPos = zzMarkedPosL;

			switch(zzAction < 0 ? zzAction : ZZ_ACTION[zzAction])
			{
				case 127:
				{
					yybegin(DIV_OR_GT);
					return JSTokenTypes.FALSE_KEYWORD;
				}
				case 167:
					break;
				case 103:
				{
					yybegin(YYINITIAL);
					return optionsHolder.isECMAL4Level ? JSTokenTypes.USE_KEYWORD : JSTokenTypes.IDENTIFIER;
				}
				case 168:
					break;
				case 73:
				{
					yybegin(YYINITIAL);
					return JSTokenTypes.EQEQ;
				}
				case 169:
					break;
				case 124:
				{
					return JSTokenTypes.UINT_KEYWORD;
				}
				case 170:
					break;
				case 33:
				{
					yybegin(YYINITIAL);
					return JSTokenTypes.DIV;
				}
				case 171:
					break;
				case 7:
				{
					if(optionsHolder.hasE4X)
					{
						yybegin(DIV_OR_GT);
						return JSTokenTypes.ANY_IDENTIFIER;
					}
					else
					{
						return JSTokenTypes.MULT;
					}
				}
				case 172:
					break;
				case 18:
				{
					yybegin(YYINITIAL);
					return JSTokenTypes.GT;
				}
				case 173:
					break;
				case 102:
				{
					yybegin(YYINITIAL);
					return JSTokenTypes.TRY_KEYWORD;
				}
				case 174:
					break;
				case 140:
				{
					yybegin(YYINITIAL);
					return optionsHolder.isECMAL4Level ? JSTokenTypes.NATIVE_KEYWORD : JSTokenTypes.IDENTIFIER;
				}
				case 175:
					break;
				case 96:
				{
					yybegin(YYINITIAL);
					return optionsHolder.isJavaScript1_6_OrBetter ? JSTokenTypes.GET_KEYWORD : JSTokenTypes.IDENTIFIER;
				}
				case 176:
					break;
				case 2:
				{
					return JSTokenTypes.XML_ATTR_VALUE;
				}
				case 177:
					break;
				case 28:
				{
					yybegin(YYINITIAL);
					return JSTokenTypes.OR;
				}
				case 178:
					break;
				case 47:
				{
					return JSTokenTypes.XML_NAME;
				}
				case 179:
					break;
				case 117:
				{
					yybegin(YYINITIAL);
					return optionsHolder.isECMAL4Level ? JSTokenTypes.UINT_KEYWORD : JSTokenTypes.IDENTIFIER;
				}
				case 180:
					break;
				case 98:
				{
					yybegin(YYINITIAL);
					return JSTokenTypes.GTGTGT;
				}
				case 181:
					break;
				case 55:
				{
					yybegin(TAG_ATTRIBUTES);
					return JSTokenTypes.XML_ATTR_VALUE_END;
				}
				case 182:
					break;
				case 137:
				{
					yybegin(YYINITIAL);
					return JSTokenTypes.RETURN_KEYWORD;
				}
				case 183:
					break;
				case 90:
				{
					return JSTokenTypes.XML_JS_SCRIPT;
				}
				case 184:
					break;
				case 123:
				{
					yybegin(YYINITIAL);
					return JSTokenTypes.VOID_KEYWORD;
				}
				case 185:
					break;
				case 72:
				{
					yybegin(YYINITIAL);
					return JSTokenTypes.ANDEQ;
				}
				case 186:
					break;
				case 84:
				{
					yybegin(YYINITIAL);
					return JSTokenTypes.MULTEQ;
				}
				case 187:
					break;
				case 116:
				{
					yybegin(DIV_OR_GT);
					return JSTokenTypes.THIS_KEYWORD;
				}
				case 188:
					break;
				case 23:
				{
					yybegin(YYINITIAL);
					return JSTokenTypes.QUEST;
				}
				case 189:
					break;
				case 129:
				{
					yybegin(YYINITIAL);
					return optionsHolder.isECMAL4Level ? JSTokenTypes.SUPER_KEYWORD : JSTokenTypes.IDENTIFIER;
				}
				case 190:
					break;
				case 92:
				{
					return JSTokenTypes.COLON_COLON;
				}
				case 191:
					break;
				case 108:
				{
					yybegin(YYINITIAL);
					return optionsHolder.isECMAL4Level ? JSTokenTypes.INT_KEYWORD : JSTokenTypes.IDENTIFIER;
				}
				case 192:
					break;
				case 16:
				{
					if(optionsHolder.hasE4X)
					{
						tagCount = 0;
						yybegin(TAG);
						yypushback(yylength());
					}
					else
					{
						return JSTokenTypes.LT;
					}
				}
				case 193:
					break;
				case 161:
				{
					yybegin(DIV_OR_GT);
					return JSTokenTypes.UNDEFINED_KEYWORD;
				}
				case 194:
					break;
				case 60:
				{
					return JSTokenTypes.END_OF_LINE_COMMENT;
				}
				case 195:
					break;
				case 54:
				{
					yybegin(tagCount == 0 ? YYINITIAL : TAG_CONTENT);
					return JSTokenTypes.XML_TAG_END;
				}
				case 196:
					break;
				case 71:
				{
					yybegin(YYINITIAL);
					return JSTokenTypes.ANDAND;
				}
				case 197:
					break;
				case 62:
				{
					if(optionsHolder.hasE4X)
					{
						yybegin(YYINITIAL);
						return JSTokenTypes.DOT_DOT;
					}
					else
					{
						yypushback(yylength() - 1);
						return JSTokenTypes.DOT;
					}
				}
				case 198:
					break;
				case 83:
				{
					yybegin(YYINITIAL);
					return JSTokenTypes.DIVEQ;
				}
				case 199:
					break;
				case 143:
				{
					yybegin(YYINITIAL);
					return optionsHolder.isECMAL4Level ? JSTokenTypes.PUBLIC_KEYWORD : JSTokenTypes.IDENTIFIER;
				}
				case 200:
					break;
				case 89:
				{
					yybegin(TAG_ATTRIBUTES);
					return JSTokenTypes.XML_JS_SCRIPT;
				}
				case 201:
					break;
				case 138:
				{
					yybegin(YYINITIAL);
					return optionsHolder.isECMAL4Level ? JSTokenTypes.STATIC_KEYWORD : JSTokenTypes.IDENTIFIER;
				}
				case 202:
					break;
				case 153:
				{
					return JSTokenTypes.XML_STYLE_COMMENT;
				}
				case 203:
					break;
				case 70:
				{
					yybegin(YYINITIAL);
					return JSTokenTypes.GE;
				}
				case 204:
					break;
				case 80:
				{
					yybegin(YYINITIAL);
					return JSTokenTypes.OROR;
				}
				case 205:
					break;
				case 135:
				{
					yybegin(YYINITIAL);
					return JSTokenTypes.WHILE_KEYWORD;
				}
				case 206:
					break;
				case 15:
				{
					yybegin(YYINITIAL);
					return JSTokenTypes.COLON;
				}
				case 207:
					break;
				case 44:
				{
					yybegin(TAG_ATTRIBUTES);
					return JSTokenTypes.XML_TAG_NAME;
				}
				case 208:
					break;
				case 48:
				{
					return isHighlightModeOn ? JSTokenTypes.XML_TAG_WHITE_SPACE : JSTokenTypes.WHITE_SPACE;
				}
				case 209:
					break;
				case 65:
				{
					return JSTokenTypes.MINUSMINUS;
				}
				case 210:
					break;
				case 118:
				{
					yybegin(YYINITIAL);
					return optionsHolder.hasE4X ? JSTokenTypes.EACH_KEYWORD : JSTokenTypes.IDENTIFIER;
				}
				case 211:
					break;
				case 24:
				{
					yybegin(YYINITIAL);
					return JSTokenTypes.AND;
				}
				case 212:
					break;
				case 26:
				{
					yybegin(YYINITIAL);
					return JSTokenTypes.EQ;
				}
				case 213:
					break;
				case 53:
				{
					return JSTokenTypes.XML_TAG_NAME;
				}
				case 214:
					break;
				case 94:
				{
					if(optionsHolder.isECMAL4Level)
					{
						yybegin(YYINITIAL);
						return JSTokenTypes.DOT_DOT_DOT;
					}
					else
					{
						yypushback(yylength() - 1);
						return JSTokenTypes.DOT;
					}
				}
				case 215:
					break;
				case 122:
				{
					yybegin(YYINITIAL);
					return JSTokenTypes.WITH_KEYWORD;
				}
				case 216:
					break;
				case 22:
				{
					yybegin(YYINITIAL);
					return JSTokenTypes.RBRACE;
				}
				case 217:
					break;
				case 87:
				{
					yybegin(--tagCount == 0 ? YYINITIAL : TAG_CONTENT);
					return JSTokenTypes.XML_EMPTY_TAG_END;
				}
				case 218:
					break;
				case 1:
				{
					return JSTokenTypes.XML_TAG_CONTENT;
				}
				case 219:
					break;
				case 142:
				{
					yybegin(YYINITIAL);
					return optionsHolder.isECMAL4Level ? JSTokenTypes.IMPORT_KEYWORD : JSTokenTypes.IDENTIFIER;
				}
				case 220:
					break;
				case 146:
				{
					yybegin(YYINITIAL);
					return JSTokenTypes.FINALLY_KEYWORD;
				}
				case 221:
					break;
				case 58:
				{
					yybegin(YYINITIAL);
					return JSTokenTypes.GWT_FIELD_OR_METHOD;
				}
				case 222:
					break;
				case 166:
				{
					yybegin(YYINITIAL);
					return optionsHolder.isECMAL4Level ? JSTokenTypes.IMPLEMENTS_KEYWORD : JSTokenTypes.IDENTIFIER;
				}
				case 223:
					break;
				case 37:
				{
					return JSTokenTypes.IDENTIFIER;
				}
				case 224:
					break;
				case 164:
				{
					yybegin(YYINITIAL);
					return optionsHolder.isECMAL4Level ? JSTokenTypes.PROTECTED_KEYWORD : JSTokenTypes.IDENTIFIER;
				}
				case 225:
					break;
				case 43:
				{
					return JSTokenTypes.BAD_CHARACTER;
				}
				case 226:
					break;
				case 145:
				{
					yybegin(YYINITIAL);
					return optionsHolder.isECMAL4Level ? JSTokenTypes.EXTENDS_KEYWORD : JSTokenTypes.IDENTIFIER;
				}
				case 227:
					break;
				case 99:
				{
					yybegin(YYINITIAL);
					return JSTokenTypes.GTGTEQ;
				}
				case 228:
					break;
				case 21:
				{
					yybegin(YYINITIAL);
					return JSTokenTypes.LBRACE;
				}
				case 229:
					break;
				case 38:
				{
					return JSTokenTypes.DOT;
				}
				case 230:
					break;
				case 162:
				{
					yybegin(YYINITIAL);
					return optionsHolder.isECMAL4Level ? JSTokenTypes.NAMESPACE_KEYWORD : JSTokenTypes.IDENTIFIER;
				}
				case 231:
					break;
				case 130:
				{
					yybegin(YYINITIAL);
					return JSTokenTypes.BREAK_KEYWORD;
				}
				case 232:
					break;
				case 36:
				{
					yybegin(YYINITIAL);
					return JSTokenTypes.BAD_CHARACTER;
				}
				case 233:
					break;
				case 79:
				{
					yybegin(YYINITIAL);
					return JSTokenTypes.OREQ;
				}
				case 234:
					break;
				case 105:
				{
					yybegin(YYINITIAL);
					return optionsHolder.isJavaScript1_7_OrBetter ? JSTokenTypes.LET_KEYWORD : JSTokenTypes.IDENTIFIER;
				}
				case 235:
					break;
				case 75:
				{
					yybegin(YYINITIAL);
					return JSTokenTypes.DO_KEYWORD;
				}
				case 236:
					break;
				case 107:
				{
					yybegin(YYINITIAL);
					return JSTokenTypes.NEW_KEYWORD;
				}
				case 237:
					break;
				case 39:
				{
					++tagCount;
					return JSTokenTypes.LT;
				}
				case 238:
					break;
				case 10:
				{
					yybegin(DIV_OR_GT);
					return isHighlightModeOn ? JSTokenTypes.SINGLE_QUOTE_STRING_LITERAL : JSTokenTypes.STRING_LITERAL;
				}
				case 239:
					break;
				case 132:
				{
					yybegin(YYINITIAL);
					return optionsHolder.isECMAL4Level ? JSTokenTypes.CLASS_KEYWORD : JSTokenTypes.IDENTIFIER;
				}
				case 240:
					break;
				case 134:
				{
					yybegin(YYINITIAL);
					return optionsHolder.isJavaScript1_7_OrBetter ? JSTokenTypes.YIELD_KEYWORD : JSTokenTypes.IDENTIFIER;
				}
				case 241:
					break;
				case 35:
				{
					yybegin(YYINITIAL);
					return JSTokenTypes.LT;
				}
				case 242:
					break;
				case 6:
				{
					return JSTokenTypes.WHITE_SPACE;
				}
				case 243:
					break;
				case 61:
				{
					return JSTokenTypes.C_STYLE_COMMENT;
				}
				case 244:
					break;
				case 160:
				{
					yybegin(COMMENT);
					yypushback(yylength());
				}
				case 245:
					break;
				case 14:
				{
					yybegin(YYINITIAL);
					return JSTokenTypes.MINUS;
				}
				case 246:
					break;
				case 111:
				{
					return JSTokenTypes.INT_KEYWORD;
				}
				case 247:
					break;
				case 9:
				{
					yybegin(YYINITIAL);
					return JSTokenTypes.PLUS;
				}
				case 248:
					break;
				case 27:
				{
					if(optionsHolder.hasE4X || optionsHolder.isGwt)
					{
						return JSTokenTypes.AT;
					}
					else
					{
						return JSTokenTypes.BAD_CHARACTER;
					}
				}
				case 249:
					break;
				case 131:
				{
					yybegin(YYINITIAL);
					return JSTokenTypes.CATCH_KEYWORD;
				}
				case 250:
					break;
				case 5:
				{
					yybegin(DIV_OR_GT);
					return JSTokenTypes.IDENTIFIER;
				}
				case 251:
					break;
				case 8:
				{
					yybegin(optionsHolder.isECMAL4Level ? MAY_BE_GENERIC_SIGNATURE : YYINITIAL);
					return JSTokenTypes.DOT;
				}
				case 252:
					break;
				case 67:
				{
					if(optionsHolder.isGwt)
					{
						yypushback(yylength());
						yybegin(GWT_FIELD_OR_METHOD);
					}
					else if(optionsHolder.hasE4X)
					{
						yybegin(YYINITIAL);
						return JSTokenTypes.COLON_COLON;
					}
					else
					{
						yypushback(yylength() - 1);
						return JSTokenTypes.COLON;
					}
				}
				case 253:
					break;
				case 31:
				{
					yybegin(YYINITIAL);
					return JSTokenTypes.COMMA;
				}
				case 254:
					break;
				case 158:
				{
					yybegin(YYINITIAL);
					return optionsHolder.isECMAL4Level ? JSTokenTypes.OVERRIDE_KEYWORD : JSTokenTypes.IDENTIFIER;
				}
				case 255:
					break;
				case 126:
				{
					yybegin(YYINITIAL);
					return JSTokenTypes.THROW_KEYWORD;
				}
				case 256:
					break;
				case 57:
				{
					yypushback(yylength());
					yybegin(YYINITIAL);
				}
				case 257:
					break;
				case 63:
				{
					return JSTokenTypes.PLUSPLUS;
				}
				case 258:
					break;
				case 104:
				{
					yybegin(YYINITIAL);
					return JSTokenTypes.FOR_KEYWORD;
				}
				case 259:
					break;
				case 93:
				{
					return JSTokenTypes.DOC_COMMENT;
				}
				case 260:
					break;
				case 82:
				{
					yybegin(YYINITIAL);
					return JSTokenTypes.PERCEQ;
				}
				case 261:
					break;
				case 100:
				{
					yybegin(YYINITIAL);
					return JSTokenTypes.EQEQEQ;
				}
				case 262:
					break;
				case 159:
				{
					yybegin(YYINITIAL);
					return JSTokenTypes.CDATA_START;
				}
				case 263:
					break;
				case 128:
				{
					yybegin(YYINITIAL);
					return optionsHolder.isECMAL4Level ? JSTokenTypes.FINAL_KEYWORD : JSTokenTypes.IDENTIFIER;
				}
				case 264:
					break;
				case 91:
				{
					tagCount--;
					yybegin(TAG_END);
					return JSTokenTypes.XML_END_TAG_START;
				}
				case 265:
					break;
				case 3:
				{
					yybegin(YYINITIAL);
					return JSTokenTypes.BAD_CHARACTER;
				}
				case 266:
					break;
				case 29:
				{
					yybegin(YYINITIAL);
					return JSTokenTypes.XOR;
				}
				case 267:
					break;
				case 88:
				{
					tagCount++;
					yybegin(TAG_CONTENT);
					return JSTokenTypes.XML_START_TAG_LIST;
				}
				case 268:
					break;
				case 115:
				{
					yybegin(DIV_OR_GT);
					return JSTokenTypes.TRUE_KEYWORD;
				}
				case 269:
					break;
				case 154:
				{
					if(optionsHolder.isECMAL4Level)
					{
						yybegin(YYINITIAL);
						return JSTokenTypes.INCLUDE_KEYWORD;
					}
					else
					{
						yypushback(yylength() - 1);
						return JSTokenTypes.BAD_CHARACTER;
					}
				}
				case 270:
					break;
				case 101:
				{
					return JSTokenTypes.JSP_TEXT;
				}
				case 271:
					break;
				case 42:
				{
					yybegin(GENERIC_SIGNATURE);
					tagCount = 1;
					return JSTokenTypes.LT;
				}
				case 272:
					break;
				case 155:
				{
					yybegin(YYINITIAL);
					return JSTokenTypes.FUNCTION_KEYWORD;
				}
				case 273:
					break;
				case 68:
				{
					yybegin(YYINITIAL);
					return JSTokenTypes.NE;
				}
				case 274:
					break;
				case 32:
				{
					yybegin(YYINITIAL);
					return JSTokenTypes.TILDE;
				}
				case 275:
					break;
				case 66:
				{
					yybegin(YYINITIAL);
					return JSTokenTypes.MINUSEQ;
				}
				case 276:
					break;
				case 148:
				{
					yybegin(YYINITIAL);
					return optionsHolder.isECMAL4Level ? JSTokenTypes.DYNAMIC_KEYWORD : JSTokenTypes.IDENTIFIER;
				}
				case 277:
					break;
				case 86:
				{
					yybegin(YYINITIAL);
					return JSTokenTypes.LE;
				}
				case 278:
					break;
				case 121:
				{
					yybegin(YYINITIAL);
					return JSTokenTypes.CASE_KEYWORD;
				}
				case 279:
					break;
				case 78:
				{
					yybegin(YYINITIAL);
					return JSTokenTypes.IN_KEYWORD;
				}
				case 280:
					break;
				case 4:
				{
					yybegin(DIV_OR_GT);
					return JSTokenTypes.NUMERIC_LITERAL;
				}
				case 281:
					break;
				case 119:
				{
					yybegin(YYINITIAL);
					return JSTokenTypes.ELSE_KEYWORD;
				}
				case 282:
					break;
				case 59:
				{
					return JSTokenTypes.REGEXP_LITERAL;
				}
				case 283:
					break;
				case 46:
				{
					yybegin(TAG);
					yypushback(yylength());
				}
				case 284:
					break;
				case 150:
				{
					yybegin(YYINITIAL);
					return optionsHolder.isECMAL4Level ? JSTokenTypes.PRIVATE_KEYWORD : JSTokenTypes.IDENTIFIER;
				}
				case 285:
					break;
				case 139:
				{
					yybegin(YYINITIAL);
					return JSTokenTypes.SWITCH_KEYWORD;
				}
				case 286:
					break;
				case 151:
				{
					yybegin(YYINITIAL);
					return optionsHolder.isECMAL4Level ? JSTokenTypes.PACKAGE_KEYWORD : JSTokenTypes.IDENTIFIER;
				}
				case 287:
					break;
				case 56:
				{
					yybegin(YYINITIAL);
					yypushback(1);
				}
				case 288:
					break;
				case 147:
				{
					yybegin(YYINITIAL);
					return JSTokenTypes.DEFAULT_KEYWORD;
				}
				case 289:
					break;
				case 157:
				{
					yybegin(YYINITIAL);
					return JSTokenTypes.CONTINUE_KEYWORD;
				}
				case 290:
					break;
				case 152:
				{
					yybegin(YYINITIAL);
					return optionsHolder.isECMAL4Level ? JSTokenTypes.VIRTUAL_KEYWORD : JSTokenTypes.IDENTIFIER;
				}
				case 291:
					break;
				case 52:
				{
					return JSTokenTypes.XML_ATTR_EQUAL;
				}
				case 292:
					break;
				case 19:
				{
					yybegin(YYINITIAL);
					return JSTokenTypes.LPAR;
				}
				case 293:
					break;
				case 41:
				{
					yypushback(yylength());
					yybegin(YYINITIAL);
				}
				case 294:
					break;
				case 109:
				{
					yybegin(YYINITIAL);
					return JSTokenTypes.VAR_KEYWORD;
				}
				case 295:
					break;
				case 34:
				{
					yybegin(YYINITIAL);
					return JSTokenTypes.MULT;
				}
				case 296:
					break;
				case 30:
				{
					yybegin(YYINITIAL);
					return JSTokenTypes.PERC;
				}
				case 297:
					break;
				case 40:
				{
					--tagCount;
					if(tagCount == 0)
					{
						yybegin(YYINITIAL);
					}
					return JSTokenTypes.GT;
				}
				case 298:
					break;
				case 81:
				{
					yybegin(YYINITIAL);
					return JSTokenTypes.XOREQ;
				}
				case 299:
					break;
				case 13:
				{
					yybegin(DIV_OR_GT);
					return JSTokenTypes.RBRACKET;
				}
				case 300:
					break;
				case 69:
				{
					yybegin(YYINITIAL);
					return JSTokenTypes.GTGT;
				}
				case 301:
					break;
				case 97:
				{
					yybegin(YYINITIAL);
					return JSTokenTypes.NEQEQ;
				}
				case 302:
					break;
				case 133:
				{
					yybegin(YYINITIAL);
					return JSTokenTypes.CONST_KEYWORD;
				}
				case 303:
					break;
				case 136:
				{
					yybegin(YYINITIAL);
					return JSTokenTypes.TYPEOF_KEYWORD;
				}
				case 304:
					break;
				case 51:
				{
					yybegin(TAG_CONTENT);
					return JSTokenTypes.XML_TAG_END;
				}
				case 305:
					break;
				case 50:
				{
					yybegin(TAG_ATTR_DQ);
					return JSTokenTypes.XML_ATTR_VALUE_START;
				}
				case 306:
					break;
				case 110:
				{
					yybegin(YYINITIAL);
					return JSTokenTypes.LTLTEQ;
				}
				case 307:
					break;
				case 85:
				{
					yybegin(YYINITIAL);
					return JSTokenTypes.LTLT;
				}
				case 308:
					break;
				case 149:
				{
					yybegin(YYINITIAL);
					return optionsHolder.isECMAL4Level ? JSTokenTypes.INCLUDE_KEYWORD : JSTokenTypes.IDENTIFIER;
				}
				case 309:
					break;
				case 163:
				{
					yybegin(YYINITIAL);
					return optionsHolder.isECMAL4Level ? JSTokenTypes.INTERFACE_KEYWORD : JSTokenTypes.IDENTIFIER;
				}
				case 310:
					break;
				case 20:
				{
					yybegin(DIV_OR_GT);
					return JSTokenTypes.RPAR;
				}
				case 311:
					break;
				case 74:
				{
					yybegin(YYINITIAL);
					return optionsHolder.isECMAL4Level ? JSTokenTypes.AS_KEYWORD : JSTokenTypes.IDENTIFIER;
				}
				case 312:
					break;
				case 25:
				{
					yybegin(YYINITIAL);
					return JSTokenTypes.SEMICOLON;
				}
				case 313:
					break;
				case 156:
				{
					yybegin(YYINITIAL);
					return optionsHolder.isECMAL4Level ? JSTokenTypes.INTERNAL_KEYWORD : JSTokenTypes.IDENTIFIER;
				}
				case 314:
					break;
				case 95:
				{
					yybegin(YYINITIAL);
					return JSTokenTypes.CDATA_END;
				}
				case 315:
					break;
				case 64:
				{
					yybegin(YYINITIAL);
					return JSTokenTypes.PLUSEQ;
				}
				case 316:
					break;
				case 106:
				{
					yybegin(YYINITIAL);
					return optionsHolder.isJavaScript1_6_OrBetter ? JSTokenTypes.SET_KEYWORD : JSTokenTypes.IDENTIFIER;
				}
				case 317:
					break;
				case 125:
				{
					yybegin(YYINITIAL);
					return JSTokenTypes.XML_STYLE_COMMENT_START;
				}
				case 318:
					break;
				case 141:
				{
					yybegin(YYINITIAL);
					return JSTokenTypes.DELETE_KEYWORD;
				}
				case 319:
					break;
				case 112:
				{
					tagCount--;
					yybegin(YYINITIAL);
					return JSTokenTypes.XML_END_TAG_LIST;
				}
				case 320:
					break;
				case 45:
				{
					tagCount++;
					yybegin(TAG);
					return JSTokenTypes.XML_START_TAG_START;
				}
				case 321:
					break;
				case 12:
				{
					yybegin(YYINITIAL);
					return JSTokenTypes.LBRACKET;
				}
				case 322:
					break;
				case 17:
				{
					yybegin(YYINITIAL);
					return JSTokenTypes.EXCL;
				}
				case 323:
					break;
				case 49:
				{
					yybegin(TAG_ATTR_SQ);
					return JSTokenTypes.XML_ATTR_VALUE_START;
				}
				case 324:
					break;
				case 11:
				{
					yybegin(DIV_OR_GT);
					return JSTokenTypes.STRING_LITERAL;
				}
				case 325:
					break;
				case 77:
				{
					yybegin(YYINITIAL);
					return optionsHolder.isECMAL4Level ? JSTokenTypes.IS_KEYWORD : JSTokenTypes.IDENTIFIER;
				}
				case 326:
					break;
				case 165:
				{
					yybegin(YYINITIAL);
					return JSTokenTypes.INSTANCEOF_KEYWORD;
				}
				case 327:
					break;
				case 76:
				{
					yybegin(YYINITIAL);
					return JSTokenTypes.IF_KEYWORD;
				}
				case 328:
					break;
				case 113:
				{
					return JSTokenTypes.XML_ENTITY_REF;
				}
				case 329:
					break;
				case 114:
				{
					yybegin(YYINITIAL);
					return JSTokenTypes.GTGTGTEQ;
				}
				case 330:
					break;
				case 120:
				{
					yybegin(DIV_OR_GT);
					return JSTokenTypes.NULL_KEYWORD;
				}
				case 331:
					break;
				case 144:
				{
					yybegin(YYINITIAL);
					return JSTokenTypes.XML_STYLE_COMMENT;
				}
				case 332:
					break;
				default:
					if(zzInput == YYEOF && zzStartRead == zzCurrentPos)
					{
						zzAtEOF = true;
						zzDoEOF();
						return null;
					}
					else
					{
						zzScanError(ZZ_NO_MATCH);
					}
			}
		}
	}


}
